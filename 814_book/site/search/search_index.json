{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"814 \u6559\u6750\u77e5\u8bc6\u70b9","text":"<ul> <li>\u7a0b\u5e8f\u8bbe\u8ba1</li> <li>\u6570\u636e\u7ed3\u6784</li> </ul>"},{"location":"data_structures/","title":"\u6570\u636e\u7ed3\u6784\u90e8\u5206","text":""},{"location":"data_structures/#_2","title":"\u7ebf\u6027\u8868","text":"<p>\u7531 \\(n(n\\geq 0)\\) \u4e2a\u6570\u636e\u7279\u6027\u76f8\u540c\u7684\u5143\u7d20\u6784\u6210\u7684\u6709\u9650\u5e8f\u5217\uff0c\u79f0\u4e3a\u7ebf\u6027\u8868\u3002 \u7ebf\u6027\u8868\u4e2d\u5143\u7d20\u7684\u4e2a\u6570 \\(n\\) \u5b9a\u4e49\u4e3a\u7ebf\u6027\u8868\u7684\u957f\u5ea6\uff0c\u5f53 \\(n = 0\\) \u65f6\u79f0\u4e4b\u4e3a\u7a7a\u8868\u3002</p>"},{"location":"data_structures/#_3","title":"\u987a\u5e8f\u8868","text":""},{"location":"data_structures/#_4","title":"\u94fe\u8868","text":""},{"location":"data_structures/#_5","title":"\u987a\u5e8f\u8868\u4e0e\u94fe\u8868\u7684\u6bd4\u8f83","text":""},{"location":"data_structures/#_6","title":"\u65f6\u95f4\u6027\u80fd\u6bd4\u8f83","text":"\u64cd\u4f5c \u987a\u5e8f\u8868 \u94fe\u8868 \u5b58\u53d6\u5143\u7d20 \\(\\boldsymbol{O(1)}\\) \\(O(n)\\) \u63d2\u5165\u5143\u7d20 \\(O(n)\\) \\(\\boldsymbol{O(1)}\\) \u5220\u9664\u5143\u7d20 \\(O(n)\\) \\(\\boldsymbol{O(1)}\\) <p>\u56e0\u6b64\uff0c\u82e5\u7ebf\u6027\u8868\u7684\u4e3b\u8981\u64cd\u4f5c\u662f\u548c\u5143\u7d20\u4f4d\u7f6e\u7d27\u5bc6\u76f8\u5173\u7684\u4e00\u7c7b\u53d6\u503c\u64cd\u4f5c\uff0c\u5f88\u5c11\u505a\u63d2\u5165\u6216\u5220\u9664\u65f6\uff0c\u5b9c\u91c7\u7528\u987a\u5e8f\u8868\u4f5c\u4e3a\u5b58\u50a8\u7ed3\u6784\uff1b\u800c\u5bf9\u4e8e\u9891\u7e41\u8fdb\u884c\u63d2\u5165\u6216\u5220\u9664\u64cd\u4f5c\u7684\u7ebf\u6027\u8868\uff0c\u5b9c\u91c7\u7528\u94fe\u8868\u4f5c\u4e3a\u5b58\u50a8\u7ed3\u6784\u3002</p>"},{"location":"data_structures/#_7","title":"\u7a7a\u95f4\u6027\u80fd\u6bd4\u8f83","text":"\u7ed3\u6784 \u987a\u5e8f\u8868 \u94fe\u8868 \u5b58\u50a8\u7a7a\u95f4 \u8fde\u7eed\u5b58\u50a8 \u79bb\u6563\u5b58\u50a8 \u5185\u5b58\u5206\u914d \u9700\u9884\u5148\u5206\u914d \u52a8\u6001\u5206\u914d \u5b58\u50a8\u5bc6\u5ea6<sup>1</sup> \u9ad8 \u4f4e <p>\u56e0\u6b64\uff0c\u5f53\u7ebf\u6027\u8868\u7684\u957f\u5ea6\u53d8\u5316\u8f83\u5927\uff0c\u96be\u4ee5\u9884\u4f30\u5b58\u50a8\u89c4\u6a21\u65f6\uff0c\u5b9c\u91c7\u7528\u94fe\u8868\u4f5c\u4e3a\u5b58\u50a8\u7ed3\u6784\uff1b\u5f53\u7ebf\u6027\u8868\u7684\u957f\u5ea6\u53d8\u5316\u4e0d\u5927\uff0c\u6613\u4e8e\u4e8b\u5148\u786e\u5b9a\u5176\u5927\u5c0f\u65f6\uff0c\u4e3a\u4e86\u8282\u7ea6\u5b58\u50a8\u7a7a\u95f4\uff0c\u5b9c\u91c7\u7528\u987a\u5e8f\u8868\u4f5c\u4e3a\u5b58\u50a8\u7ed3\u6784\u3002</p>"},{"location":"data_structures/#_8","title":"\u6808","text":"<p>\u6808\u662f\u9650\u5b9a\u4ec5\u5728\u8868\u5c3e\u8fdb\u884c\u63d2\u5165\u6216\u5220\u9664\u64cd\u4f5c\u7684\u7ebf\u6027\u8868\u3002\u56e0\u6b64\uff0c\u5bf9\u6808\u6765\u8bf4\uff0c\u8868\u5c3e\u7aef\u6709\u5176\u7279\u6b8a\u542b\u4e49\uff0c\u79f0\u4e3a\u6808\u9876\uff08<code>top</code>\uff09\uff0c\u76f8\u5e94\u5730\uff0c\u8868\u5934\u7aef\u79f0\u4e3a\u6808\u5e95\uff08<code>bottom</code>\uff09\u3002\u4e0d\u542b\u5143\u7d20\u7684\u7a7a\u8868\u79f0\u4e3a\u7a7a\u6808\u3002\u5047\u8bbe\u6808\uff1a $$ S = (a_1, a_2, \\cdots, a_n) $$ \u5219\u79f0 \\(a_1\\) \u4e3a\u6808\u5e95\u5143\u7d20\uff0c\\(a_n\\) \u4e3a\u6808\u9876\u5143\u7d20\u3002\u6808\u4e2d\u5143\u7d20\u6309 \\(a_1, a_2, \\cdots, a_n\\) \u7684\u6b21\u5e8f\u8fdb\u6808\uff0c\u9000\u6808\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5e94\u4e3a\u6808\u9876\u5143\u7d20\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6808\u7684\u4fee\u6539\u662f\u6309\u540e\u8fdb\u5148\u51fa\u7684\u539f\u5219\u8fdb\u884c\u7684\uff0c\u56e0\u6b64\uff0c\u6808\u53c8\u79f0\u4e3a\u540e\u8fdb\u5148\u51fa\uff08Last In First Out\uff0cLIFO\uff09\u7684\u7ebf\u6027\u8868\u3002</p>"},{"location":"data_structures/#_9","title":"\u987a\u5e8f\u6808","text":"<ol> <li> <p>\u5b58\u50a8\u5bc6\u5ea6\u662f\u6307\u6570\u636e\u5143\u7d20\u672c\u8eab\u6240\u5360\u7528\u7684\u5b58\u50a8\u91cf\u548c\u6574\u4e2a\u8282\u70b9\u7ed3\u6784\u6240\u5360\u7528\u7684\u5b58\u50a8\u91cf\u4e4b\u6bd4\uff0c\u5373\uff1a\\(\\text{\u5b58\u50a8\u5bc6\u5ea6}=\\dfrac {\\text{\u6570\u636e\u5143\u7d20\u672c\u8eab\u5360\u7528\u7684\u5b58\u50a8\u91cf}} {\\text{\u8282\u70b9\u7ed3\u6784\u5360\u7528\u7684\u5b58\u50a8\u91cf}}\\) \u21a9</p> </li> </ol>"},{"location":"programming/","title":"\u7a0b\u5e8f\u8bbe\u8ba1\u90e8\u5206","text":"<p>Not finished yet.</p>"},{"location":"data_structures/Linklist/","title":"\u94fe\u8868","text":"<p>\u7ebf\u6027\u8868\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u7684\u7279\u70b9\u662f\uff1a\u7528\u4e00\u7ec4\u4efb\u610f\u7684\u5b58\u50a8\u5355\u5143\u5b58\u50a8\u7ebf\u6027\u8868\u7684\u6570\u636e\u5143\u7d20\uff08\u8fd9\u7ec4\u5b58\u50a8\u5355\u5143\u53ef\u4ee5\u662f\u8fde\u7eed\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e0d\u8fde\u7eed\u7684\uff09\u3002</p>"},{"location":"data_structures/Linklist/#_1","title":"\u5355\u94fe\u8868","text":"\u5355\u94fe\u8868\u7684\u529f\u80fd\u5b9e\u73b0 \u5b9a\u4e49\u521d\u59cb\u5316\u53d6\u503c\u67e5\u627e\u63d2\u5165\u5220\u9664\u521b\u5efa\u5355\u94fe\u8868 <pre><code>typedef struct Node\n{\n    ElemType data;\n    struct Node *next;\n} LNode *LinkList;\n</code></pre> <p>\u7b97\u6cd5\u6b65\u9aa4</p> <ol> <li>\u751f\u6210\u65b0\u8282\u70b9\u4f5c\u4e3a\u5934\u8282\u70b9\uff0c\u7528\u5934\u6307\u9488 <code>L</code> \u6307\u5411\u8be5\u8282\u70b9<sup>1</sup>\uff1b</li> <li>\u5934\u8282\u70b9\u7684\u6307\u9488\u57df\u7f6e\u7a7a\u3002</li> </ol> <pre><code>Status InitList(LinkList &amp;L)\n{\n    L = new LNode; // (1)!\n    L-&gt;next = NULL;\n    return OK;\n}\n</code></pre> <ol> <li>\u6b64\u5904\u4f7f\u7528 C \u8bed\u8a00\u4e3a\uff1a<code>L = (LNode*)malloc(sizeof(LNode));</code>\u3002</li> </ol> <p>\u7b97\u6cd5\u6b65\u9aa4</p> <ol> <li>\u7528\u6307\u9488 <code>p</code> \u6307\u5411\u9996\u5143\u8282\u70b9\uff0c\u7528 \\(j\\) \u505a\u8ba1\u6570\u5668\u521d\u503c\u8d4b\u4e3a \\(1\\)\uff1b</li> <li>\u4ece\u9996\u5143\u8282\u70b9\u5f00\u59cb\u4f9d\u6b21\u987a\u7740\u94fe\u57df <code>next</code> \u5411\u4e0b\u8bbf\u95ee\uff0c\u53ea\u8981\u6307\u5411\u5f53\u524d\u8282\u70b9\u7684\u6307\u9488 <code>p</code> \u4e0d\u4e3a\u7a7a\uff0c\u5e76\u4e14\u6ca1\u6709\u5230\u8fbe\u5e8f\u53f7\u4e3a \\(i\\) \u7684\u8282\u70b9\uff0c\u5219\u5faa\u73af\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a<ul> <li><code>p</code> \u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff1b</li> <li>\u8ba1\u6570\u5668 \\(j\\) \u52a0 \\(1\\)\uff1b</li> </ul> </li> <li>\u9000\u51fa\u5faa\u73af\u65f6\uff0c\u82e5 <code>p</code> \u4e3a\u7a7a\uff0c\u6216\u8005\u8ba1\u6570\u5668 \\(j &gt; i\\)\uff0c\u8bf4\u660e\u6307\u5b9a\u7684\u5e8f\u53f7 \\(i\\) \u4e0d\u5408\u6cd5\uff08\\(i &gt; n\\) \u6216 \\(i \\leq 0\\)\uff09<sup>2</sup>\uff0c\u53d6\u503c\u5931\u8d25\u8fd4\u56de <code>ERROR</code>\uff1b\u5426\u5219\u53d6\u503c\u6210\u529f\uff0c\u6b64\u65f6 \\(j=i\\)\uff0c<code>p</code> \u6240\u6307\u7684\u8282\u70b9\u5c31\u662f\u8981\u627e\u7684\u7b2c \\(i\\) \u4e2a\u8282\u70b9\uff0c\u5c06\u5176\u6570\u636e\u503c\u8d4b\u7ed9 <code>e</code>\uff0c\u8fd4\u56de <code>OK</code>\u3002</li> </ol> <pre><code>Status GetElem(LinkList L, int i, ElemType &amp;e)\n{\n    LNode *p = L-&gt;next;\n    int j = 1;\n    while (p &amp;&amp; j &lt; i)\n    {\n        p = p-&gt;next;\n        j++;\n    }\n    if (!p || j &gt; i) return ERROR;\n    e = p-&gt;data;\n    return OK;\n}\n</code></pre> <p>\u8be5\u7b97\u6cd5\u7684\u57fa\u672c\u64cd\u4f5c\u662f\u6bd4\u8f83 \\(j\\) \u548c \\(i\\) \u7684\u5927\u5c0f\u5e76\u540e\u79fb\u6307\u9488 <code>p</code>\uff0c<code>while</code> \u5faa\u73af\u4f53\u4e2d\u7684\u8bed\u53e5\u9891\u5ea6\u4e0e\u4f4d\u7f6e \\(i\\) \u6709\u5173\u3002\u82e5 \\(1 \\leq i \\leq n\\)\uff0c\u5219\u9891\u5ea6\u4e3a \\(i \u2212 1\\)\uff0c\u4e00\u5b9a\u80fd\u53d6\u503c\u6210\u529f\uff1b\u82e5 \\(i &gt; n\\)\uff0c\u5219\u9891\u5ea6\u4e3a \\(n\\)\uff0c\u53d6\u503c\u5931\u8d25\u3002\u56e0\u6b64\u7b97\u6cd5\u7684\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\)\u3002</p> <p>\u5047\u8bbe\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u5143\u7d20\u7684\u53d6\u503c\u6982\u7387\u76f8\u7b49\uff0c\u5373\uff1a $$ p_i = \\dfrac 1 n $$ \u5219\uff1a $$ ASL = \\dfrac 1 n \\sum_{i=1}^n(i-1)=\\dfrac{n-1}2 $$</p> <p>\u6545\u5355\u94fe\u8868\u7684\u53d6\u503c\u64cd\u4f5c\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\)\u3002</p> <p>\u7b97\u6cd5\u6b65\u9aa4</p> <ol> <li>\u7528\u6307\u9488 <code>p</code> \u6307\u5411\u9996\u5143\u8282\u70b9\uff1b</li> <li>\u4ece\u9996\u5143\u8282\u70b9\u5f00\u59cb\u4f9d\u6b21\u987a\u7740\u94fe\u57df <code>next</code> \u5411\u4e0b\u67e5\u627e\uff0c\u53ea\u8981\u6307\u5411\u5f53\u524d\u8282\u70b9\u7684\u6307\u9488 <code>p</code> \u4e0d\u4e3a\u7a7a\uff0c\u5e76\u4e14 <code>p</code> \u6240\u6307\u8282\u70b9\u7684\u6570\u636e\u57df\u4e0d\u7b49\u4e8e\u7ed9\u5b9a\u503c <code>e</code>\uff0c\u5219\u5faa\u73af\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a<code>p</code> \u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff1b</li> <li>\u8fd4\u56de <code>p</code>\u3002\u82e5\u67e5\u627e\u6210\u529f\uff0c<code>p</code> \u6b64\u65f6\u6307\u5411\u8282\u70b9\u7684\u5730\u5740\u503c\uff0c\u82e5\u67e5\u627e\u5931\u8d25\uff0c\u5219 <code>p</code> \u7684\u503c\u4e3a\u7a7a\u3002</li> </ol> <pre><code>LNode *LocateElem(LinkList L, ElemType e)\n{\n    LNode *p = L-&gt;next;\n    while (p &amp;&amp; p-&gt;data!= e) p = p-&gt;next;\n    return p;\n}\n</code></pre> <p>\u8be5\u7b97\u6cd5\u7684\u6267\u884c\u65f6\u95f4\u4e0e\u5f85\u67e5\u627e\u7684\u503c <code>e</code> \u76f8\u5173\uff0c\u5176\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u7c7b\u4f3c\u4e8e\u5355\u94fe\u8868\u7684\u53d6\u503c\u64cd\u4f5c\uff0c\u4e5f\u4e3a \\(O(n)\\)\u3002</p> <p>\u7b97\u6cd5\u6b65\u9aa4</p> <ol> <li>\u67e5\u627e\u8282\u70b9 \\(a_{i\u22121}\\) \u5e76\u7531\u6307\u9488 <code>p</code> \u6307\u5411\u8be5\u8282\u70b9\uff1b</li> <li>\u751f\u6210\u4e00\u4e2a\u65b0\u8282\u70b9 <code>*s</code>\uff1b</li> <li>\u5c06\u65b0\u8282\u70b9 <code>*s</code> \u7684\u6570\u636e\u57df\u7f6e\u4e3a <code>e</code>\uff1b</li> <li>\u5c06\u65b0\u8282\u70b9 <code>*s</code> \u7684\u6307\u9488\u57df\u6307\u5411\u8282\u70b9 \\(a_i\\)\uff1b</li> <li>\u5c06\u8282\u70b9 <code>*p</code> \u7684\u6307\u9488\u57df\u6307\u5411\u65b0\u8282\u70b9 <code>*s</code>\u3002</li> </ol> <pre><code>Status ListInsert(LinkList &amp;L, int i, ElemType e)\n{\n    LNode *p = L-&gt;next;\n    int j = 0;\n    while (p &amp;&amp; j &lt; i - 1)\n    {\n        p = p-&gt;next;\n        j++;\n    }\n    if (!p || j &gt; i - 1) return ERROR;\n    LNode *s = new LNode;\n    s-&gt;data = e;\n    s-&gt;next = p-&gt;next;\n    p-&gt;next = s;\n    return OK;\n}\n</code></pre> <p>\u8be5\u7b97\u6cd5\u7684\u6267\u884c\u65f6\u95f4\u4e0e\u5f85\u63d2\u5165\u4f4d\u7f6e \\(i\\) \u76f8\u5173\uff0c\u5176\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u7c7b\u4f3c\u4e8e\u5355\u94fe\u8868\u7684\u53d6\u503c\u64cd\u4f5c\uff0c\u4e5f\u4e3a \\(O(n)\\)\u3002</p> <p>\u7b97\u6cd5\u6b65\u9aa4</p> <ol> <li>\u67e5\u627e\u8282\u70b9 \\(a_{i\u22121}\\) \u5e76\u7531\u6307\u9488 <code>p</code> \u6307\u5411\u8be5\u8282\u70b9\uff1b</li> <li>\u4e34\u65f6\u4fdd\u5b58\u5f85\u5220\u9664\u8282\u70b9 \\(a_i\\) \u7684\u5730\u5740\u5728 <code>q</code> \u4e2d\uff0c\u4ee5\u5907\u91ca\u653e\uff1b</li> <li>\u5c06\u8282\u70b9 <code>*p</code> \u7684\u6307\u9488\u57df\u6307\u5411 \\(a_i\\) \u7684\u76f4\u63a5\u540e\u7ee7\u8282\u70b9\uff1b</li> <li>\u91ca\u653e\u8282\u70b9 \\(a_i\\) \u7684\u7a7a\u95f4\u3002</li> </ol> <pre><code>Status ListDelete(LinkList &amp;L, int i)\n{\n    LNode *p = L;\n    int j = 0;\n    while (p-&gt;next &amp;&amp; j &lt; i - 1)\n    {\n        p = p-&gt;next;\n        j++;\n    }\n    if (!p-&gt;next || j &gt; i - 1) return ERROR;\n    LNode *q = p-&gt;next;\n    p-&gt;next = q-&gt;next;\n    delete q; // (1)!\n    return OK;\n}\n</code></pre> <ol> <li>\u6b64\u5904\u4f7f\u7528 C \u8bed\u8a00\u4e3a\uff1a<code>free(q);</code>\u3002</li> </ol> <p>\u8be5\u7b97\u6cd5\u7684\u6267\u884c\u65f6\u95f4\u4e0e\u5f85\u5220\u9664\u4f4d\u7f6e \\(i\\) \u76f8\u5173\uff0c\u5176\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u7c7b\u4f3c\u4e8e\u5355\u94fe\u8868\u7684\u53d6\u503c\u64cd\u4f5c\uff0c\u4e5f\u4e3a \\(O(n)\\)\u3002</p> \u524d\u63d2\u6cd5\uff08\u5934\u63d2\u6cd5\uff09\u540e\u63d2\u6cd5\uff08\u5c3e\u63d2\u6cd5\uff09 <p>\u524d\u63d2\u6cd5\u662f\u901a\u8fc7\u5c06\u65b0\u8282\u70b9\u9010\u4e2a\u63d2\u5165\u94fe\u8868\u7684\u5934\u90e8\uff08\u5934\u8282\u70b9\u4e4b\u540e\uff09\u6765\u521b\u5efa\u94fe\u8868\uff0c\u6bcf\u6b21\u7533\u8bf7\u4e00\u4e2a\u65b0\u8282\u70b9\uff0c\u8bfb\u5165\u76f8\u5e94\u7684\u6570\u636e\u5143\u7d20\u503c\uff0c\u7136\u540e\u5c06\u65b0\u8282\u70b9\u63d2\u5165\u5230\u5934\u8282\u70b9\u4e4b\u540e\u3002\u56e0\u4e3a\u6bcf\u6b21\u63d2\u5165\u5728\u94fe\u8868\u7684\u5934\u90e8\uff0c\u6240\u4ee5\u8f93\u5165\u987a\u5e8f\u548c\u7ebf\u6027\u8868\u4e2d\u7684\u903b\u8f91\u987a\u5e8f\u662f\u76f8\u53cd\u7684\u3002</p> <p>\u7b97\u6cd5\u6b65\u9aa4</p> <ol> <li>\u521b\u5efa\u4e00\u4e2a\u53ea\u6709\u5934\u8282\u70b9\u7684\u7a7a\u94fe\u8868\u3002</li> <li>\u6839\u636e\u5f85\u521b\u5efa\u94fe\u8868\u5305\u62ec\u7684\u5143\u7d20\u4e2a\u6570 \\(n\\)\uff0c\u5faa\u73af \\(n\\) \u6b21\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a<ul> <li>\u751f\u6210\u4e00\u4e2a\u65b0\u8282\u70b9 <code>*p</code>\uff1b</li> <li>\u8f93\u5165\u5143\u7d20\u503c\u8d4b\u7ed9\u65b0\u8282\u70b9 <code>*p</code> \u7684\u6570\u636e\u57df\uff1b</li> <li>\u5c06\u65b0\u8282\u70b9 <code>*p</code> \u63d2\u5165\u5230\u5934\u8282\u70b9\u4e4b\u540e\u3002</li> </ul> </li> </ol> <pre><code>void CreateList_H(LinkList &amp;L, int n)\n{\n    L = new LNode;\n    L-&gt;next = NULL;\n    for (int i = 0; i &lt; n; i++)\n    {\n        LNode *p = new LNode;\n        cin &gt;&gt; p-&gt;data;\n        p-&gt;next = L-&gt;next;\n        L-&gt;next = p;\n    }\n}\n</code></pre> <p>\u8be5\u7b97\u6cd5\u7684\u6267\u884c\u65f6\u95f4\u4e0e\u5f85\u521b\u5efa\u5143\u7d20\u4e2a\u6570 \\(n\\) \u76f8\u5173\uff0c\u5176\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u4e3a \\(O(n)\\)\u3002</p> <p>\u540e\u63d2\u6cd5\u662f\u901a\u8fc7\u5c06\u65b0\u8282\u70b9\u9010\u4e2a\u63d2\u5165\u94fe\u8868\u7684\u5c3e\u90e8\u6765\u521b\u5efa\u94fe\u8868\u3002\u540c\u524d\u63d2\u6cd5\u4e00\u6837\uff0c\u6bcf\u6b21\u7533\u8bf7\u4e00\u4e2a\u65b0\u8282\u70b9\uff0c\u8bfb\u5165\u76f8\u5e94\u7684\u6570\u636e\u5143\u7d20\u503c\u3002\u4e0d\u540c\u7684\u662f\uff0c\u4e3a\u4e86\u4f7f\u65b0\u8282\u70b9\u80fd\u591f\u63d2\u5165\u8868\u5c3e\uff0c\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u5c3e\u6307\u9488 <code>r</code> \u6307\u5411\u94fe\u8868\u7684\u5c3e\u8282\u70b9\u3002</p> <p>\u7b97\u6cd5\u6b65\u9aa4</p> <ol> <li>\u521b\u5efa\u4e00\u4e2a\u53ea\u6709\u5934\u8282\u70b9\u7684\u7a7a\u94fe\u8868\u3002</li> <li>\u5c3e\u6307\u9488 <code>r</code> \u521d\u59cb\u5316\uff0c\u6307\u5411\u5934\u8282\u70b9\u3002</li> <li>\u6839\u636e\u521b\u5efa\u94fe\u8868\u5305\u62ec\u7684\u5143\u7d20\u4e2a\u6570 \\(n\\)\uff0c\u5faa\u73af \\(n\\) \u6b21\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a<ul> <li>\u751f\u6210\u4e00\u4e2a\u65b0\u8282\u70b9 <code>*p</code>\uff1b</li> <li>\u8f93\u5165\u5143\u7d20\u503c\u8d4b\u7ed9\u65b0\u8282\u70b9 <code>*p</code> \u7684\u6570\u636e\u57df\uff1b</li> <li>\u5c06\u65b0\u8282\u70b9 <code>*p</code> \u63d2\u5165\u5c3e\u8282\u70b9 <code>*r</code> \u4e4b\u540e\uff1b</li> <li>\u5c3e\u6307\u9488 <code>r</code> \u6307\u5411\u65b0\u7684\u5c3e\u8282\u70b9 *p`\u3002</li> </ul> </li> </ol> <pre><code>void CreateList_T(LinkList &amp;L, int n)\n{\n    L = new LNode;\n    L-&gt;next = NULL;\n    LNode *r = L;\n    for (int i = 0; i &lt; n; i++)\n    {\n        LNode *p = new LNode;\n        cin &gt;&gt; p-&gt;data;\n        p-&gt;next = NULL;\n        r-&gt;next = p;\n        r = p;\n    }\n}\n</code></pre> <p>\u8be5\u7b97\u6cd5\u7684\u6267\u884c\u65f6\u95f4\u4e0e\u5f85\u521b\u5efa\u5143\u7d20\u4e2a\u6570 \\(n\\) \u76f8\u5173\uff0c\u5176\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u4e3a \\(O(n)\\)\u3002</p>"},{"location":"data_structures/Linklist/#_2","title":"\u53cc\u5411\u94fe\u8868","text":"<p>\u5728\u5355\u94fe\u8868\u4e2d\uff0c\u67e5\u627e\u76f4\u63a5\u540e\u7ee7\u7684\u6267\u884c\u65f6\u95f4\u4e3a \\(O(1)\\)\uff0c\u800c\u67e5\u627e\u76f4\u63a5\u524d\u9a71\u7684\u6267\u884c\u65f6\u95f4\u4e3a \\(O(n)\\)\u3002\u4e3a\u514b\u670d\u5355\u94fe\u8868\u8fd9\u79cd\u5355\u5411\u6027\u7684\u7f3a\u70b9\uff0c\u53ef\u5229\u7528\u53cc\u5411\u94fe\u8868\uff08Double Linked List\uff09\u3002</p> \u53cc\u5411\u94fe\u8868\u7684\u529f\u80fd\u5b9e\u73b0 \u5b9a\u4e49\u63d2\u5165\u5220\u9664 <pre><code>typedef struct Node\n{\n    ElemType data;\n    struct Node *prior;\n    struct Node *next;\n} DuLNode, *DuLinkList;\n</code></pre> <pre><code>Status ListInsert_DuL(DuLinkList &amp;L, int i, ElemType e)\n{\n    if (!(p=GetElem_DuL(L, i))) return ERROR;\n    DuLNode *s = new DuLNode;\n    s-&gt;data = e;\n    s-&gt;prior = p-&gt;prior;\n    p-&gt;prior-&gt;next = s;\n    s-&gt;next = p;\n    p-&gt;prior = s;\n    return OK;\n}\n</code></pre> <p>\u8be5\u7b97\u6cd5\u7684\u6267\u884c\u65f6\u95f4\u4e0e\u5f85\u63d2\u5165\u4f4d\u7f6e \\(i\\) \u76f8\u5173\uff0c\u5176\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u4e3a \\(O(n)\\)\u3002</p> <pre><code>Status ListDelete_DuL(DuLinkList &amp;L, int i)\n{\n    if (!(p=GetElem_DuL(L, i))) return ERROR;\n    p-&gt;prior-&gt;next = p-&gt;next;\n    p-&gt;next-&gt;prior = p-&gt;prior;\n    delete p;\n    return OK;\n}\n</code></pre> <p>\u8be5\u7b97\u6cd5\u7684\u6267\u884c\u65f6\u95f4\u4e0e\u5f85\u5220\u9664\u4f4d\u7f6e \\(i\\) \u76f8\u5173\uff0c\u5176\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u4e3a \\(O(n)\\)\u3002</p> \u5f80\u5e74\u771f\u9898 2012 A \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u5224\u65ad\u9898\uff0c\u6b63\u786e\u7684\u6253 \u221a\uff0c\u9519\u8bef\u7684\u6253 \u00d7 \u5e76\u6539\u6b63</p> <p>\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u662f\u4e00\u79cd\u987a\u5e8f\u5b58\u53d6\u7ed3\u6784\u3002</p> <p>\u221a</p> 2012 A \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b97\u6cd5\u8bbe\u8ba1\u9898</p> <p>\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570 <code>ListInsert</code> \u5b9e\u73b0\u5728\u5e26\u5934\u8282\u70b9\u7684\u6709\u5e8f\u5355\u94fe\u8868\u4e0a\u5b9e\u73b0\u63d2\u5165\u65b0\u5143\u7d20\u5e76\u4fdd\u6301\u6709\u5e8f\u3002\u5355\u94fe\u8868\u7684\u8282\u70b9\u5f62\u5f0f\u5316\u5b9a\u4e49\u4e3a\uff1a</p> <pre><code>typedef struct node\n{\n    int data;\n    struct node *next;\n} linklist;\n</code></pre> <p><code>ListInsert</code> \u51fd\u6570\u7684\u58f0\u660e\u4e3a\uff1a</p> <pre><code>void ListInsert(linklist *L, int x);\n</code></pre> <pre><code>void ListInsert(linklist *L, int x)\n{ \n    linklist *q = (linklist*)malloc(sizeof(linklist)), *p = L;\n    q-&gt;next = NULL;\n    q-&gt;data = x;\n    while (p-&gt;next &amp;&amp; p-&gt;next-&gt;data &lt;= x)\n        p = p-&gt;next;\n    q-&gt;next = p-&gt;next;\n    p-&gt;next = q;\n}\n</code></pre> 2013 A \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b80\u7b54\u9898</p> <p>\u9605\u8bfb\u5355\u94fe\u8868\u7684\u7b97\u6cd5\uff0c\u6307\u51fa\u7b97\u6cd5\u7684\u529f\u80fd\u5e76\u5206\u6790\u8be5\u7b97\u6cd5\u7684\u6548\u7387\u80fd\u5426\u63d0\u9ad8\u5230 \\(O(1)\\)\u3002</p> <pre><code>int AAA(LinkList *L)\n{\n    LinkList *p = L;\n    int i = 0;\n    while (p-&gt;next != NULL)\n    {\n        i++;\n        p = p-&gt;next;\n    }\n    return i;\n}\n</code></pre> <p>\u8be5\u7b97\u6cd5\u529f\u80fd\u4e3a\u8ba1\u7b97\u5355\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u53ef\u4ee5\u5728\u63d2\u5165\u65f6\u5c06\u957f\u5ea6\u4fdd\u5b58\u5230\u5934\u8282\u70b9\u4e2d\uff0c\u4ece\u800c\u63d0\u9ad8\u6548\u7387\u5230 \\(O(1)\\)\u3002</p> 2013 B \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b80\u7b54\u9898</p> <p>\u9605\u8bfb\u5355\u94fe\u8868\u7684\u7b97\u6cd5\uff0c\u6307\u51fa\u7b97\u6cd5\u7684\u529f\u80fd\u5e76\u5206\u6790\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <pre><code>int TTT(LinkList *L, int e)\n{\n    LinkList *p = L-&gt;next;\n    int n = 1;\n    while (p != NULL &amp;&amp; p-&gt;data != e)\n    {\n        p = p-&gt;next;\n        n++;\n    }\n    if (p == NULL) return 0;\n    else return n;\n}\n</code></pre> <p>\u8be5\u7b97\u6cd5\u529f\u80fd\u4e3a\u67e5\u627e\u5355\u94fe\u8868\u4e2d\u7b2c \\(e\\) \u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\)\u3002</p> 2013 B \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b97\u6cd5\u8bbe\u8ba1\u9898</p> <p>\u5df2\u77e5\u957f\u5ea6\u4e3a \\(n\\) \u7684\u7ebf\u6027\u8868\uff0c\u6570\u636e\u4e3a\u6574\u578b\uff0c\u8bbe\u8ba1\u7b97\u6cd5\u5220\u9664\u7ebf\u6027\u8868\u4e2d\u6240\u6709\u503c\u4e3a <code>item</code> \u7684\u6570\u636e\u5143\u7d20\uff0c\u8981\u6c42\uff1a</p> <p>(1) \u8bbe\u8ba1\u5408\u9002\u7684\u5b58\u50a8\u7ed3\u6784\uff0c\u63cf\u8ff0\u7b97\u6cd5\u7684\u5b9e\u73b0\u601d\u8def\uff0c\u5e76\u5206\u6790\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <p>(2) \u7528 C \u8bed\u8a00\u5b9e\u73b0\u8be5\u7b97\u6cd5\u3002</p> <p>\u8981\u9891\u7e41\u5220\u9664\uff0c\u53ef\u4ee5\u4f7f\u7528\u94fe\u8868\uff0c\u5b9a\u4e49\u4e3a\uff1a</p> <pre><code>typedef struct node\n{\n    int data;\n    struct node *next;\n} Linklist;\n</code></pre> <p>\u7b97\u6cd5\u601d\u8def</p> <p>\u904d\u5386\u94fe\u8868\uff0c\u82e5\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u8282\u70b9\u4e0d\u4e3a\u7a7a\u4e14\u6570\u636e\u7b49\u4e8e <code>item</code>\uff0c\u5219\u5220\u9664\u8be5\u8282\u70b9\uff1b\u5426\u5219\uff0c\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002</p> <pre><code>void DeleteItem(Linklist *L, int item)\n{\n    if (L == NULL) return;\n    Linklist *p = L, *q;\n    while (p-&gt;next != NULL)\n    {\n        if (p-&gt;data == item)\n        {\n            q = p-&gt;next;\n            p-&gt;next = q-&gt;next;\n            free(q);\n        }\n        else p = p-&gt;next;\n    }\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790</p> <p>\u904d\u5386\u94fe\u8868\u4e00\u6b21\uff0c\u5355\u70b9\u5220\u9664\u6b21\u6570\u81f3\u591a \\(n\\) \u6b21\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\)\u3002</p> 2014 A \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b97\u6cd5\u8bbe\u8ba1\u9898</p> <p>\u5df2\u77e5\u7ebf\u6027\u94fe\u8868\u7684\u5f62\u5f0f\u5316\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>typedef struct node\n{\n    int data;\n    struct node *next;\n} listnode;\ntypedef listnode *linklist;\n</code></pre> <p>\u8bf7\u6839\u636e\u8be5\u5f62\u5f0f\u5316\u5b9a\u4e49\u8bbe\u8ba1\u7b97\u6cd5\uff0c\u5176\u529f\u80fd\u662f\u5728\u9012\u589e\u6709\u5e8f\u5355\u94fe\u8868 \\(L\\) \u7684\u5408\u9002\u4f4d\u7f6e\u4e0a\u63d2\u5165\u65b0\u6570\u636e <code>x</code> \u5e76\u4fdd\u6301\u9012\u589e\u6709\u5e8f\u4e14\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\)\u3002\u8981\u6c42\u7b80\u8ff0\u7b97\u6cd5\u601d\u60f3\u5e76\u7f16\u7a0b\u5b9e\u73b0\u8be5\u7b97\u6cd5\u5bf9\u5e94\u7684\u51fd\u6570 <code>void func(linklist L, int x)</code>\u3002</p> <p>\u7b97\u6cd5\u601d\u8def</p> <p>\u904d\u5386\u94fe\u8868\uff0c\u82e5\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u8282\u70b9\u4e0d\u4e3a\u7a7a\u4e14\u6570\u636e\u5927\u4e8e\u7b49\u4e8e <code>x</code>\uff0c\u5219\u63d2\u5165\u65b0\u8282\u70b9\uff1b\u5426\u5219\uff0c\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002</p> <pre><code>void func(linklist L, int x)\n{\n    if (L == NULL) return;\n    linklist p = L, q;\n    while (p-&gt;next != NULL &amp;&amp; p-&gt;next-&gt;data &lt; x)\n        p = p-&gt;next;\n    q = (linklist)malloc(sizeof(listnode));\n    q-&gt;data = x;\n    q-&gt;next = p-&gt;next;\n    p-&gt;next = q;\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a\u904d\u5386\u94fe\u8868\u4e00\u6b21\uff0c\u5355\u70b9\u63d2\u5165\u6b21\u6570\u81f3\u591a\u4e00\u6b21\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\)\u3002</p> 2014 B \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b97\u6cd5\u8bbe\u8ba1\u9898</p> <p>\u8bf7\u7b80\u8ff0\u7b97\u6cd5\u5b9e\u73b0\u601d\u60f3\u3002\u7b97\u6cd5\u529f\u80fd\u662f\u5c06\u5e26\u5934\u8282\u70b9\u4e14\u6570\u636e\u57df\u4f9d\u6b21\u4e3a \\(a_1, a_2, a_3, \\cdots, a_n(n \\geq 3)\\) \u7684\u5355\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u9006\u7f6e\uff08\u5373\u6700\u7ec8\u5355\u94fe\u8868\u7684\u6570\u636e\u57df\u4f9d\u6b21\u4e3a \\(a_n, a_{n-1}, \\cdots, a_3, a_2, a_1\\)\uff09\u4e14\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\)\u3002</p> <p>\u7b97\u6cd5\u601d\u8def</p> <p>\u65ad\u5f00\u5355\u94fe\u8868 \\(L\\) \u7684\u5934\u8282\u70b9\u548c\u9996\u5143\u8282\u70b9\uff0c\u4f7f\u9996\u5143\u8282\u70b9\u5f62\u6210\u540e\u7eed\u94fe\u8868 \\(L'\\)\uff0c\u904d\u5386 \\(L'\\)\uff0c\u4f9d\u6b21\u5c06\u8282\u70b9\u4f7f\u7528\u5934\u63d2\u6cd5\u63d2\u5165 \\(L\\) \u5e76\u5728 \\(L'\\) \u4e2d\u5220\u9664\u3002</p> <pre><code>void Reverse(LinkList *&amp;L)\n{\n    LinkList *p = L-&gt;next;\n    L-&gt;next = NULL;\n    while (p != NULL)\n    {\n        LinkList *q = p;\n        p = p-&gt;next;\n        q-&gt;next = L-&gt;next;\n        L-&gt;next = q;\n    }\n}\n</code></pre> 2015 A \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b97\u6cd5\u8bbe\u8ba1\u9898</p> <p>\u5355\u94fe\u8868\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>typedef struct LNode\n{\n    int data;\n    struct LNode *next;\n} LinkList;\n</code></pre> <p>\u6709\u4e00\u4e2a\u9012\u589e\u7684\u5e26\u5934\u8282\u70b9\u7684\u5355\u94fe\u8868\uff08\u5141\u8bb8\u51fa\u73b0\u91cd\u590d\u7684\u503c\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u5220\u9664\u503c\u76f8\u540c\u7684\u8282\u70b9\uff08\u76f8\u540c\u503c\u53ea\u4fdd\u7559\u4e00\u4e2a\uff09\u3002\u8981\u6c42\uff1a</p> <p>(1) \u63cf\u8ff0\u7b97\u6cd5\u7684\u601d\u8def\uff1b</p> <p>(2) \u8865\u5145\u5b8c\u6210\u7b97\u6cd5 <code>void Dels(LinkList *Head) {}</code>\u3002</p> <p>\u7b97\u6cd5\u601d\u8def</p> <p>\u904d\u5386\u94fe\u8868\uff0c\u82e5\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u8282\u70b9\u4e0d\u4e3a\u7a7a\u4e14\u6570\u636e\u7b49\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u636e\uff0c\u5219\u5220\u9664\u8be5\u8282\u70b9\uff1b\u5426\u5219\uff0c\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002</p> <pre><code>void Dels(LinkList *Head)\n{\n    if (Head == NULL) return;\n    LinkList *p = Head, *q;\n    while (p-&gt;next != NULL)\n    {\n        if (p-&gt;data == p-&gt;next-&gt;data)\n        {\n            q = p-&gt;next;\n            p-&gt;next = q-&gt;next;\n            free(q);\n        }\n        else p = p-&gt;next;\n    }\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a\u904d\u5386\u94fe\u8868\u4e00\u6b21\uff0c\u5355\u70b9\u5220\u9664\u6b21\u6570\u81f3\u591a \\(n-1\\) \u6b21\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\)\u3002</p> 2016 B / 2018 / 2021 \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b80\u7b54\u9898</p> <p>\uff082016 B / 2018\uff09\u7ebf\u6027\u8868\u7684\u4e24\u79cd\u5b58\u50a8\u7ed3\u6784\u5404\u6709\u54ea\u4e9b\u4f18\u7f3a\u70b9\uff1f\uff082021\uff09\u5404\u6709\u4f55\u7279\u70b9\uff1f</p> \u987a\u5e8f\u8868 \u94fe\u8868 \u7279\u70b9 \u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u6570\u636e\u5143\u7d20\uff0c\u5176\u7269\u7406\u4f4d\u7f6e\u4e5f\u662f\u76f8\u90bb\u7684\u3002 \u7528\u4e00\u7ec4\u4efb\u610f\u7684\u5b58\u50a8\u5355\u5143\u5b58\u50a8\u7ebf\u6027\u8868\u7684\u6570\u636e\u5143\u7d20\uff08\u8fd9\u7ec4\u5b58\u50a8\u5355\u5143\u53ef\u4ee5\u662f\u8fde\u7eed\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e0d\u8fde\u7eed\u7684\uff09\u3002 \u4f18\u70b9 \u5b58\u53d6\u5143\u7d20\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\)\uff0c\u9002\u5408\u9891\u7e41\u8bbf\u95ee\u7684\u5143\u7d20\uff1b\u5b58\u50a8\u5bc6\u5ea6\u9ad8\uff0c\u9002\u5408\u5927\u91cf\u6570\u636e\u7684\u5b58\u50a8\uff1b \u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u53ea\u9700\u4fee\u6539\u6307\u9488\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\)\uff1b\u5b58\u50a8\u5bc6\u5ea6\u4f4e\uff0c\u9002\u5408\u5b58\u50a8\u79bb\u6563\u6570\u636e\u3002 \u7f3a\u70b9 \u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u9700\u8981\u79fb\u52a8\u5927\u91cf\u5143\u7d20\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\)\uff1b\u5360\u7528\u5927\u91cf\u5185\u5b58\uff0c\u4e0d\u9002\u5408\u5b58\u50a8\u79bb\u6563\u6570\u636e\u3002 \u5b58\u53d6\u5143\u7d20\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\)\uff0c\u4e0d\u9002\u5408\u9891\u7e41\u8bbf\u95ee\u7684\u5143\u7d20\uff1b\u5360\u7528\u5185\u5b58\u7a7a\u95f4\u591a\uff0c\u4e0d\u9002\u5408\u5927\u91cf\u6570\u636e\u7684\u5b58\u50a8\u3002 2016 B \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b80\u7b54\u9898</p> <p>\u5355\u94fe\u8868\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>typedef struct LNode\n{\n    ElemType data;\n    struct LNode *next;\n} LinkList;\n</code></pre> <p>\u9605\u8bfb\u4e0b\u9762\u7684\u4ee3\u7801\uff1a</p> <pre><code>LinkList mynote(LinkList L) // L \u662f\u4e0d\u5e26\u5934\u8282\u70b9\u7684\u5355\u94fe\u8868\u7684\u5934\u6307\u9488\n{\n    if (L &amp;&amp; L-&gt;next)\n    {\n        LinkList q = L;\n        L = L-&gt;next;\n        LinkList p = L;\nS1:     while (p-&gt;next) p = p-&gt;next;\nS2:     p-&gt;next = q; q-&gt;next = NULL;\n    }\n    return L;\n}\n</code></pre> <p>\u8bf7\u56de\u7b54\u4e0b\u5217\u95ee\u9898\uff1a</p> <p>(1) \u8bf4\u660e\u8bed\u53e5 \\(S_1\\) \u7684\u529f\u80fd\uff1b</p> <p>(2) \u8bf4\u660e\u8bed\u53e5\u7ec4 \\(S_2\\) \u7684\u529f\u80fd\uff1b</p> <p>(3) \u8bbe\u94fe\u8868\u8868\u793a\u7684\u7ebf\u6027\u8868\u4e3a \\((a_1, a_2, \\cdots, a_n)\\)\uff0c\u5199\u51fa\u7b97\u6cd5\u6267\u884c\u540e\u7684\u8fd4\u56de\u503c\u6240\u8868\u793a\u7684\u7ebf\u6027\u8868\u3002</p> <p>(1) \u8bed\u53e5 \\(S_1\\) \u7528\u4e8e\u627e\u5230\u5355\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u3002</p> <p>(2) \u8bed\u53e5\u7ec4 \\(S_2\\) \u7528\u4e8e\u5c06\u539f\u7b2c\u4e00\u4e2a\u8282\u70b9\u53d8\u6210\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u3002</p> <p>(3) \u7b97\u6cd5\u6267\u884c\u540e\u7684\u8fd4\u56de\u503c\u6240\u8868\u793a\u7684\u7ebf\u6027\u8868\u4e3a \\((a_2, a_3, \\cdots, a_n, a_1)\\)\u3002</p> 2016 B / 2019 \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b97\u6cd5\u8bbe\u8ba1\u9898</p> <p>\u8bbe\u8ba1\u7b97\u6cd5\u7edf\u8ba1\u51fa\u5355\u94fe\u8868 <code>HL</code> \u4e2d\u8282\u70b9\u7684\u503c\u7b49\u4e8e\u7ed9\u5b9a\u503c <code>x</code> \u7684\u8282\u70b9\u6570\uff0c\u5355\u94fe\u8868\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>typedef struct LNode\n{\n    ElemType data;\n    struct LNode *next;\n} LinkNode;\n</code></pre> <pre><code>int Count(LinkNode *HL, ElemType x)\n{\n    int count = 0;\n    LinkNode *p = HL;\n    while (p != NULL)\n    {\n        if (p-&gt;data == x) count++;\n        p = p-&gt;next;\n    }\n    return count;\n}\n</code></pre> 2018 \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b97\u6cd5\u8bbe\u8ba1\u9898</p> <p>\u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u7528\u4e8e\u5224\u65ad\u5355\u94fe\u8868\u4e2d\u7684\u5143\u7d20\u662f\u5426\u662f\u9012\u589e\u7684\u3002</p> <pre><code>bool IsIncr(LinkList *L)\n{\n    if (L == NULL || L-&gt;next == NULL) return true;\n    LinkList *p = L-&gt;next;\n    while (p != NULL)\n    {\n        if (p-&gt;data &lt; L-&gt;data) return false;\n        L = p;\n        p = p-&gt;next;\n    }\n    return true;\n}\n</code></pre> 2022 \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b80\u7b54\u9898</p> <p>\u5047\u8bbe\u4e00\u4e2a\u542b\u6709 \\(n\\) \u4e2a\u5143\u7d20\u7684\u7ebf\u6027\u8868\u91c7\u7528\u5e26\u5934\u8282\u70b9\u7684\u5faa\u73af\u53cc\u94fe\u8868\u5b58\u50a8\uff0c\u8bf7\u7ed9\u51fa\u4ee5\u4e0b\u8fd0\u7b97\u6240\u9700\u8981\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <p>(1) \u67e5\u627e\u5e8f\u53f7\u4e3a \\(i(1 \\leq i \\leq n)\\) \u7684\u5143\u7d20\uff1b</p> <p>(2) \u67e5\u627e\u7b2c\u4e00\u4e2a\u503c\u4e3a \\(x\\) \u7684\u5143\u7d20\uff1b</p> <p>(3) \u63d2\u5165\u65b0\u5143\u7d20\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u5143\u7d20\uff1b</p> <p>(4) \u63d2\u5165\u65b0\u5143\u7d20\u4f5c\u4e3a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff1b</p> <p>(5) \u63d2\u5165\u7b2c \\(i(2 \\leq i \\leq n)\\) \u4e2a\u5143\u7d20\uff1b</p> <p>(6) \u5220\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20\uff1b</p> <p>(7) \u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff1b</p> <p>(8) \u5220\u9664\u7b2c \\(i(2 \\leq i \\leq n)\\) \u4e2a\u5143\u7d20\u3002</p> \u8fd0\u7b97 \u65f6\u95f4\u590d\u6742\u5ea6 \u67e5\u627e\u5e8f\u53f7\u4e3a \\(i\\) \u7684\u5143\u7d20 \\(O(n)\\) \u67e5\u627e\u7b2c\u4e00\u4e2a\u503c\u4e3a \\(x\\) \u7684\u5143\u7d20 \\(O(n)\\) \u63d2\u5165\u65b0\u5143\u7d20\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u5143\u7d20 \\(O(1)\\) \u63d2\u5165\u65b0\u5143\u7d20\u4f5c\u4e3a\u6700\u540e\u4e00\u4e2a\u5143\u7d20 \\(O(1)\\) \u63d2\u5165\u7b2c \\(i\\) \u4e2a\u5143\u7d20 \\(O(n)\\) \u5220\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20 \\(O(1)\\) \u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20 \\(O(1)\\) \u5220\u9664\u7b2c \\(i\\) \u4e2a\u5143\u7d20 \\(O(n)\\) <ol> <li> <p>\u4e00\u822c\u94fe\u8868\u5934\u8282\u70b9\u4e3a\u7a7a\u8282\u70b9\uff0c\u4e0d\u5b58\u653e\u6570\u636e\uff0c\u5934\u8282\u70b9\u7684\u4e0b\u4e00\u8282\u70b9\u4e3a\u9996\u5143\u8282\u70b9\u3002\u00a0\u21a9</p> </li> <li> <p>\u5bf9\u4e8e\u5355\u94fe\u8868\uff0c\\(n\\) \u4e3a\u94fe\u8868\u957f\u5ea6\u3002\u00a0\u21a9</p> </li> </ol>"},{"location":"data_structures/Sqlist/","title":"\u987a\u5e8f\u8868","text":"<p>\u7ebf\u6027\u8868\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\uff0c\u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u6570\u636e\u5143\u7d20\uff0c\u5176\u7269\u7406\u4f4d\u7f6e\u4e5f\u662f\u76f8\u90bb\u7684\u3002\u7ebf\u6027\u8868\u4e2d\u7b2c \\(i + 1\\) \u4e2a\u6570\u636e\u5143\u7d20\u7684\u5b58\u50a8\u4f4d\u7f6e \\(LOC(a_{i+1})\\) \u548c\u7b2c \\(i\\) \u4e2a\u6570\u636e\u5143\u7d20\u7684\u5b58\u50a8\u4f4d\u7f6e \\(LOC(a_i)\\) \u4e4b\u95f4\u6ee1\u8db3\u4e0b\u5217\u5173\u7cfb\uff1a $$ LOC(a_{i+1}) = LOC(a_i) + \\text{sizeof}(a_i) $$</p> <p>\u4e00\u822c\u6765\u8bf4\uff0c\u7ebf\u6027\u8868\u7684\u7b2c \\(i\\) \u4e2a\u6570\u636e\u5143\u7d20 \\(a_i\\) \u7684\u5b58\u50a8\u4f4d\u7f6e\u4e3a\uff1a $$ LOC(a_i) = LOC(a_1) + (i-1) \\times \\text{sizeof}(a_i) $$</p> <p>\u53ea\u8981\u786e\u5b9a\u4e86\u5b58\u50a8\u7ebf\u6027\u8868\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u7ebf\u6027\u8868\u4e2d\u4efb\u4e00\u6570\u636e\u5143\u7d20\u90fd\u53ef\u968f\u673a\u5b58\u53d6\uff0c\u6240\u4ee5\u987a\u5e8f\u8868\u662f\u4e00\u79cd\u968f\u673a\u5b58\u53d6\u7ed3\u6784\u3002</p> \u987a\u5e8f\u8868\u7684\u529f\u80fd\u5b9e\u73b0 \u5b9a\u4e49\u521d\u59cb\u5316\u8868\u957f\u5224\u7a7a\u53d6\u503c\u67e5\u627e\u63d2\u5165\u5220\u9664 <pre><code>#define MAXSIZE 100\ntypedef struct \n{\n    ElemType *elem; // (1)!\n    int length;\n} SqList;\n</code></pre> <ol> <li>\u5982\u679c\u6b64\u5904\u76f4\u63a5\u5b9a\u4e49\u4e3a <code>ElemType data[MAXSIZE]</code>\uff0c\u5219\u521d\u59cb\u5316\u65f6\u65e0\u9700\u4e3a <code>elem</code> \u6570\u7ec4\u5206\u914d\u7a7a\u95f4\u3002</li> </ol> <p>\u7b97\u6cd5\u6b65\u9aa4 </p> <ol> <li>\u4e3a\u987a\u5e8f\u8868 <code>L</code> \u52a8\u6001\u5206\u914d\u4e00\u4e2a\u9884\u5b9a\u4e49\u5927\u5c0f\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f7f <code>elem</code> \u6307\u5411\u8fd9\u6bb5\u7a7a\u95f4\u7684\u57fa\u5730\u5740\uff1b</li> <li>\u5c06\u8868\u957f\u7f6e\u4e3a \\(0\\)\uff1b</li> </ol> <pre><code>Status InitList(SqList &amp;L) // (1)!\n{\n    L.elem = new ElemType[MAXSIZE]; // (2)!\n    if (!L.elem) return OVERFLOW;\n    L.length = 0;\n    return OK;\n}\n</code></pre> <ol> <li>\u5982\u679c\u4f20\u5165\u7684\u53c2\u6570\u9700\u8981\u88ab\u4fee\u6539\uff0c\u5219\u9700\u8981\u52a0\u4e0a <code>&amp;</code> \u7b26\u53f7\u3002</li> <li>\u5982\u679c\u5b9a\u4e49\u4e3a <code>ElemType data[MAXSIZE]</code>\uff0c\u5219\u65e0\u9700\u8fd9\u4e00\u6b65\u3002</li> </ol> <pre><code>int ListLength(SqList L)\n{\n    return L.length;\n}\n</code></pre> <pre><code>bool ListEmpty(SqList L)\n{\n    return L.length == 0;\n}\n</code></pre> <p>\u7b97\u6cd5\u6b65\u9aa4</p> <ol> <li>\u5224\u65ad\u6307\u5b9a\u4f4d\u7f6e\u5e8f\u53f7 \\(i\\) \u662f\u5426\u5408\u7406 \\((1 \\leq i \\leq n)\\)\uff0c\u82e5\u4e0d\u5408\u7406\uff0c\u5219\u8fd4\u56de <code>ERROR</code>\uff1b</li> <li>\u82e5 \\(i\\) \u503c\u5408\u7406\uff0c\u5219\u5c06\u7b2c \\(i\\) \u4e2a\u6570\u636e\u5143\u7d20 <code>elem[i-1]</code><sup>1</sup> \u8d4b\u7ed9\u53c2\u6570 <code>e</code>\uff0c\u901a\u8fc7 <code>e</code> \u8fd4\u56de\u7b2c \\(i\\) \u4e2a\u6570\u636e\u5143\u7d20\u7684\u4f20\u503c\u3002</li> </ol> <pre><code>Status GetElem(SqList L, int i, ElemType &amp;e)\n{\n    if (i &lt; 1 || i &gt; L.length) return ERROR;\n    e = L.elem[i - 1];\n    return OK;\n}\n</code></pre> <p>\u663e\u7136\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\)\u3002</p> <p>\u7b97\u6cd5\u6b65\u9aa4</p> <ol> <li>\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u8d77\uff0c\u4f9d\u6b21\u5c06\u5176\u503c\u548c <code>e</code> \u76f8\u6bd4\u8f83\uff0c\u82e5\u627e\u5230\u503c\u4e0e <code>e</code> \u76f8\u7b49\u7684\u5143\u7d20 <code>elem[i]</code>\uff0c\u5219\u8fd4\u56de\u5176\u5e8f\u53f7 \\(i+1\\)\uff1b</li> <li>\u82e5\u904d\u5386\u5b8c\u6574\u4e2a\u8868\uff0c\u4ecd\u672a\u627e\u5230 <code>e</code>\uff0c\u5219\u8fd4\u56de <code>0</code>\u3002</li> </ol> <pre><code>int LocateElem(SqList L, ElemType e)\n{\n    for (int i = 0; i &lt; L.length; i++)\n        if (L.elem[i] == e) return i + 1;\n    return 0;\n}\n</code></pre> <p>\u4e3a\u786e\u5b9a\u5143\u7d20\u5728\u987a\u5e8f\u8868\u4e2d\u7684\u4f4d\u7f6e\uff0c\u9700\u548c\u7ed9\u5b9a\u503c\u8fdb\u884c\u6bd4\u8f83\u7684\u6570\u636e\u5143\u7d20\u4e2a\u6570\u7684\u671f\u671b\u503c\u79f0\u4e3a\u67e5\u627e\u7b97\u6cd5\u5728\u67e5\u627e\u6210\u529f\u65f6\u7684\u5e73\u5747\u67e5\u627e\u957f\u5ea6\uff08Average Search Length\uff0cASL\uff09\u3002</p> <p>\u5047\u8bbe \\(p_i\\) \u662f\u67e5\u627e\u7b2c \\(i\\) \u4e2a\u5143\u7d20\u7684\u6982\u7387\uff0c\\(C_i\\) \u4e3a\u627e\u5230\u8868\u4e2d\u5176\u5173\u952e\u5b57\u4e0e\u7ed9\u5b9a\u503c\u76f8\u7b49\u7684\u7b2c \\(i\\) \u4e2a\u8bb0\u5f55\u65f6\uff0c\u548c\u7ed9\u5b9a\u503c\u5df2\u8fdb\u884c\u8fc7\u6bd4\u8f83\u7684\u5173\u952e\u5b57\u4e2a\u6570\uff0c\u5219\u5728\u957f\u5ea6\u4e3a \\(n\\) \u7684\u7ebf\u6027\u8868\u4e2d\uff0c\u67e5\u627e\u6210\u529f\u65f6\u7684\u5e73\u5747\u67e5\u627e\u957f\u5ea6\u4e3a\uff1a $$ ASL = \\sum_{i=1}^{n} p_i C_i $$</p> <p>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\\(C_i=i\\)\uff0c\u5047\u8bbe\u6bcf\u4e2a\u5143\u7d20\u7684\u6982\u7387\u76f8\u7b49\uff0c\u5373\uff1a $$ p_i = \\dfrac{1}{n} $$</p> <p>\u5219\u6709\uff1a $$ ASL = \\dfrac{1}{n} \\sum_{i=1}^{n} i = \\dfrac{n(n+1)}{2} $$</p> <p>\u6545\u987a\u5e8f\u8868\u7684\u67e5\u627e\u64cd\u4f5c\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\)\u3002</p> <p>\u7b97\u6cd5\u6b65\u9aa4</p> <ol> <li>\u5224\u65ad\u6307\u5b9a\u4f4d\u7f6e\u5e8f\u53f7 \\(i\\) \u662f\u5426\u5408\u7406 \\((1 \\leq i \\leq n+1)\\)\uff0c\u82e5\u4e0d\u5408\u7406\uff0c\u5219\u8fd4\u56de <code>ERROR</code>\uff1b</li> <li>\u5224\u65ad\u8868\u662f\u5426\u5df2\u6ee1\uff0c\u82e5\u6ee1\uff0c\u5219\u8fd4\u56de <code>OVERFLOW</code>\uff1b</li> <li>\u5c06\u4e0b\u6807\u8303\u56f4 \\([i, n)\\) \u4f9d\u6b21\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a7a\u51fa\u4f4d\u7f6e \\(i\\)\uff0c\u82e5 \\(i = n+1\\)\uff0c\u5219\u65e0\u9700\u79fb\u52a8\uff1b</li> <li>\u5c06\u65b0\u5143\u7d20 <code>e</code> \u5b58\u5165\u4f4d\u7f6e \\(i\\)\uff1b</li> <li>\u8868\u957f\u52a0 \\(1\\)\uff1b</li> </ol> <pre><code>Status ListInsert(SqList &amp;L, int i, ElemType e)\n{\n    if (i &lt; 1 || i &gt; L.length + 1) return ERROR;\n    if (L.length == MAXSIZE) return OVERFLOW;\n    for (int j = L.length - 1; j &gt;= i - 1; j--)\n        L.elem[j + 1] = L.elem[j];\n    L.elem[i - 1] = e;\n    ++L.length;\n    return OK;\n}\n</code></pre> <p>\u5047\u8bbe \\(p_i\\) \u662f\u5728\u7b2c \\(i\\) \u4e2a\u5143\u7d20\u4e4b\u524d\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u7684\u6982\u7387\uff0c\\(E_{\\text{ins}}\\) \u4e3a\u5728\u957f\u5ea6\u4e3a \\(n\\) \u7684\u7ebf\u6027\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u65f6\u6240\u9700\u79fb\u52a8\u5143\u7d20\u6b21\u6570\u7684\u671f\u671b\u503c\uff08\u5e73\u5747\u6b21\u6570\uff09\uff0c\u5219\u6709\uff1a $$ E_{\\text{ins}} = \\sum_{i=1}^{n+1} p_i(n-i+1) $$</p> <p>\u5047\u8bbe\u6bcf\u4e2a\u5143\u7d20\u7684\u6982\u7387\u76f8\u7b49\uff0c\u5373\uff1a $$ p_i = \\dfrac{1}{n+1} $$</p> <p>\u5219\u6709\uff1a $$ E_{\\text{ins}} = \\dfrac{1}{n+1} \\sum_{i=1}^{n+1} (n-i+1) = \\dfrac{n}{2} $$  </p> <p>\u6545\u987a\u5e8f\u8868\u7684\u63d2\u5165\u64cd\u4f5c\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\)\u3002</p> <p>\u7b97\u6cd5\u6b65\u9aa4</p> <ol> <li>\u5224\u65ad\u6307\u5b9a\u4f4d\u7f6e\u5e8f\u53f7 \\(i\\) \u662f\u5426\u5408\u7406 \\((1 \\leq i \\leq n)\\)\uff0c\u82e5\u4e0d\u5408\u7406\uff0c\u5219\u8fd4\u56de <code>ERROR</code>\uff1b</li> <li>\u5c06\u4e0b\u6807\u8303\u56f4 \\([i+1, n)\\) \u4f9d\u6b21\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\uff0c\u82e5 \\(i = n\\)\uff0c\u5219\u65e0\u9700\u79fb\u52a8\uff1b</li> <li>\u8868\u957f\u51cf \\(1\\)\uff1b</li> </ol> <pre><code>Status ListDelete(SqList &amp;L, int i)\n{\n    if (i &lt; 1 || i &gt; L.length) return ERROR;\n    for (int j = i; j &lt; L.length; j++)\n        L.elem[j - 1] = L.elem[j];\n    --L.length;\n    return OK;\n}\n</code></pre> <p>\u5047\u8bbe \\(p_i\\) \u662f\u5220\u9664\u7b2c \\(i\\) \u4e2a\u5143\u7d20\u7684\u6982\u7387\uff0c\\(E_{\\text{del}}\\) \u4e3a\u5728\u957f\u5ea6\u4e3a \\(n\\) \u7684\u7ebf\u6027\u8868\u4e2d\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u65f6\u6240\u9700\u79fb\u52a8\u5143\u7d20\u6b21\u6570\u7684\u671f\u671b\u503c\uff08\u5e73\u5747\u6b21\u6570\uff09\uff0c\u5219\u6709\uff1a $$ E_{\\text{del}} = \\sum_{i=1}^{n} p_i(n-i) $$</p> <p>\u5047\u8bbe\u6bcf\u4e2a\u5143\u7d20\u7684\u6982\u7387\u76f8\u7b49\uff0c\u5373\uff1a $$ p_i = \\dfrac{1}{n} $$</p> <p>\u5219\u6709\uff1a $$ E_{\\text{del}} = \\dfrac{1}{n} \\sum_{i=1}^{n} (n-i) = \\dfrac{n-1}{2} $$  </p> <p>\u6545\u987a\u5e8f\u8868\u7684\u5220\u9664\u64cd\u4f5c\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\)\u3002</p> \u5f80\u5e74\u771f\u9898 2012 A \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u5224\u65ad\u9898\uff0c\u6b63\u786e\u7684\u6253 \u221a\uff0c\u9519\u8bef\u7684\u6253 \u00d7 \u5e76\u6539\u6b63</p> <p>\u5728\u987a\u5e8f\u8868\u4e2d\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\)\u3002</p> <p>\u00d7</p> <p>\u5728\u987a\u5e8f\u8868\u4e2d\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(\\boldsymbol{\\underline{O(n)}}\\)\u3002</p> 2013 A \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b80\u7b54\u9898</p> <p>\u9605\u8bfb\u987a\u5e8f\u8868\u7684\u7b97\u6cd5\uff0c\u6307\u51fa\u7b97\u6cd5\u7684\u529f\u80fd\u5e76\u5206\u6790\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <pre><code>int TTT(SqList *&amp;L, int i, int &amp;e)\n{\n    int j;\n    if (i &lt; 1 || i &gt; L-&gt;length) return 0;\n    i--; e = L-&gt;data[i];\n    for (j = i; j &lt; L-&gt;length - 1; j++) L-&gt;data[j] = L-&gt;data[j + 1];\n    L-&gt;length--; return 1;\n}\n</code></pre> <p>\u529f\u80fd\uff1a\u5220\u9664\u6307\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u901a\u8fc7 <code>e</code> \u8fd4\u56de\u88ab\u5220\u9664\u7684\u5143\u7d20\u7684\u503c\u3002\u8fd4\u56de\u503c\u4e3a\u662f\u5426\u5220\u9664\u6210\u529f\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\)\u3002</p> 2013 B \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b80\u7b54\u9898</p> <p>\u9605\u8bfb\u987a\u5e8f\u8868\u7684\u7b97\u6cd5\uff0c\u6307\u51fa\u7b97\u6cd5\u7684\u529f\u80fd\u5e76\u5206\u6790\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <pre><code>int BBB(SqList *&amp;L, int a[], int n)\n{\n    int i;\n    L = (SqList*)malloc(sizeof(SqList));\n    for (i = 0; i &lt; n; i++) L-&gt;data[i] = a[i];\n    L-&gt;length = n;\n}\n</code></pre> <p>\u529f\u80fd\uff1a\u5c06\u6570\u7ec4 <code>a</code> \u8f6c\u5316\u4e3a\u987a\u5e8f\u8868 <code>L</code>\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u904d\u5386\u4e86\u4e00\u904d\u6570\u7ec4\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\)\u3002</p> 2014 A \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b80\u7b54\u9898</p> <p>\u7b80\u8ff0\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u7684\u7279\u70b9\u3002</p> <p>\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u7684\u7279\u70b9\u662f\uff1a\u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u6570\u636e\u5143\u7d20\uff0c\u5176\u7269\u7406\u4f4d\u7f6e\u4e5f\u662f\u76f8\u90bb\u7684\u3002\u501f\u52a9\u5143\u7d20\u5728\u5b58\u50a8\u5668\u4e2d\u7684\u76f8\u5bf9\u4f4d\u7f6e\u6765\u8868\u793a\u6570\u636e\u5143\u7d20\u4e4b\u95f4\u7684\u903b\u8f91\u5173\u7cfb\u7684\uff0c\u901a\u5e38\u501f\u52a9\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u7684\u6570\u7ec4\u7c7b\u578b\u6765\u63cf\u8ff0\u3002\u53ef\u4ee5\u968f\u673a\u8bbf\u5b58\u3002</p> 2014 B \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b97\u6cd5\u8bbe\u8ba1\u9898</p> <p>\u5df2\u77e5\u7ebf\u6027\u987a\u5e8f\u8868\u7684\u5f62\u5f0f\u5316\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>typedef struct\n{\n    int data[ListSize];\n    int length;\n} Sqlist;\n</code></pre> <p>\u8bf7\u6839\u636e\u8be5\u5f62\u5f0f\u5316\u5b9a\u4e49\u8bbe\u8ba1\u7b97\u6cd5\uff0c\u5176\u529f\u80fd\u662f\u5728\u6709\u5e8f\u987a\u5e8f\u8868 <code>L</code> \u7684\u5408\u9002\u4f4d\u7f6e\u4e0a\u63d2\u5165\u65b0\u6570\u636e <code>x</code> \u5e76\u4fdd\u6301\u6709\u5e8f\u4e14\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\)\u3002\u8981\u6c42\u7b80\u8ff0\u7b97\u6cd5\u601d\u60f3\u5e76\u7f16\u7a0b\u5b9e\u73b0\u8be5\u7b97\u6cd5\u5bf9\u5e94\u7684\u51fd\u6570 <code>void func(Sqlist *&amp;L, int x)</code>\u3002</p> <p>\u7b97\u6cd5\u601d\u60f3\uff1a</p> <ol> <li>\u5224\u65ad <code>L</code> \u662f\u5426\u5df2\u6ee1\uff0c\u82e5\u6ee1\uff0c\u5219\u8fd4\u56de <code>OVERFLOW</code>\uff1b</li> <li>\u627e\u5230 <code>L</code> \u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e <code>x</code> \u7684\u5143\u7d20\u7684\u4f4d\u7f6e \\(i\\)\uff1b</li> <li>\u5c06 <code>L</code> \u4e2d \\([i,\\) <code>L.length</code>\\()\\) \u53ca\u4e4b\u540e\u7684\u5143\u7d20\u4f9d\u6b21\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\uff0c\u7a7a\u51fa\u4f4d\u7f6e \\(i\\)\uff0c\u82e5 \\(i =\\) <code>L.length</code> \\(+1\\)\uff0c\u5219\u65e0\u9700\u79fb\u52a8\uff1b</li> <li>\u5c06\u65b0\u6570\u636e <code>x</code> \u5b58\u5165\u4f4d\u7f6e \\(i\\)\uff1b</li> <li>\u8868\u957f\u52a0 \\(1\\)\uff1b</li> </ol> <p>\u7f16\u7a0b\u5b9e\u73b0\uff1a</p> <pre><code>void func(Sqlist *&amp;L, int x)\n{\n    int i;\n    if (L-&gt;length == MAXSIZE) return OVERFLOW;\n    for (i = 0; i &lt; L-&gt;length; i++)\n        if (L-&gt;data[i] &gt;= x) break;\n    for (int j = L-&gt;length - 1; j &gt;= i; j--)\n        L-&gt;data[j + 1] = L-&gt;data[j];\n    L-&gt;data[i] = x;\n    L-&gt;length++;\n}\n</code></pre> 2017 \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b80\u7b54\u9898</p> <p>\u73b0\u6709\u4e00\u4e2a\u7ebf\u6027\u8868 \\(L = (a, c, a, d, b)\\)\uff0c\u6c42 <code>ListLength(L)</code>\u3001<code>ListEmpty(L)</code>\u3001<code>GetElem(L, 3, e)</code>\u3001<code>LocateElem(L, a)</code>\u3001<code>ListInsert(L, 4, f)</code> \u548c <code>ListDelete(L, 3)</code> \u7b49\u57fa\u672c\u8fd0\u7b97\u7684\u6267\u884c\u7ed3\u679c\u3002</p> \u57fa\u672c\u8fd0\u7b97 \u6267\u884c\u7ed3\u679c <code>ListLength(L)</code> \\(5\\) <code>ListEmpty(L)</code> <code>false</code>\\((0)\\) <code>GetElem(L, 3, e)</code> <code>e = a</code> <code>LocateElem(L, a)</code> \\(1\\) <code>ListInsert(L, 4, f)</code> \\(L = (a, c, a, f, d, b)\\) <code>ListDelete(L, 3)</code> \\(L = (a, c, d, b)\\) 2017 \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b97\u6cd5\u8bbe\u8ba1\u9898</p> <p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5c06 <code>x</code> \u63d2\u5165\u4e00\u4e2a\u6709\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u7684\u7ebf\u6027\u8868\uff08\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\uff09\u7684\u9002\u5f53\u4f4d\u7f6e\u4e0a\uff0c\u5e76\u4fdd\u6301\u7ebf\u6027\u8868\u7684\u6709\u5e8f\u6027\u3002</p> <p>\u7ebf\u6027\u8868\u63cf\u8ff0\u5982\u4e0b\uff1a</p> <pre><code>typedef struct\n{\n    ElemType data[MaxSize];\n    int length;\n} Sqlist;\n</code></pre> <pre><code>void InsertSort(Sqlist &amp;L, ElemType x)\n{\n    int i;\n    for (i = 0; i &lt; L.length; i++)\n        if (x &lt; L.data[i]) break;\n    for (int j = L.length - 1; j &gt;= i; j--)\n        L.data[j + 1] = L.data[j];\n    L.data[i] = x;\n    L.length++;\n}\n</code></pre> 2018 \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b80\u7b54\u9898</p> <p>\u6709\u4e00\u4e2a\u7ebf\u6027\u8868 \\(L = (x, y, t, m, k, z, x)\\)\uff0c\u6c42 <code>ListLength(L)</code>\u3001<code>ListEmpty(L)</code>\u3001<code>GetElem(L, 4, e)</code>\u3001<code>LocateElem(L, x)</code>\u3001<code>ListInsert(L, 4, z)</code>\u3001<code>ListDelete(L, 6)</code> \u7b49\u57fa\u672c\u8fd0\u7b97\u7684\u6267\u884c\u7ed3\u679c\u3002</p> \u57fa\u672c\u8fd0\u7b97 \u6267\u884c\u7ed3\u679c <code>ListLength(L)</code> \\(7\\) <code>ListEmpty(L)</code> <code>false</code>\\((0)\\) <code>GetElem(L, 4, e)</code> <code>e = m</code> <code>LocateElem(L, x)</code> \\(1\\) <code>ListInsert(L, 4, z)</code> \\(L = (x, y, t, z, m, k, z, x)\\) <code>ListDelete(L, 6)</code> \\(L = (x, y, t, m, k, x)\\) 2020 \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b97\u6cd5\u8bbe\u8ba1\u9898</p> <p>\u7528 C \u8bed\u8a00\u5199\u4e00\u7b97\u6cd5\uff0c\u5c06\u987a\u5e8f\u8868 <code>L</code> \u4e2d\u7684\u6240\u6709\u5143\u7d20\u9006\u7f6e\uff0c\u8981\u6c42\u7b97\u6cd5\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\)\u3002</p> <p>\u7b97\u6cd5\u601d\u60f3\uff1a</p> <ol> <li>\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488 <code>i</code> \u548c <code>j</code>\uff0c<code>i</code> \u6307\u5411\u4e0b\u6807 \\(0\\)\uff0c<code>j</code> \u6307\u5411 <code>L.length</code> \\(- 1\\)\uff1b</li> <li>\u5f53 <code>i &lt;= j</code> \u65f6\uff0c\u4ea4\u6362 <code>L.data[i]</code> \u548c <code>L.data[j]</code>\uff1b</li> <li>\u540c\u65f6 <code>i</code> \u548c <code>j</code> \u5411\u524d\u79fb\u52a8\u4e00\u4f4d\uff1b</li> <li>\u76f4\u5230 <code>i &gt; j</code> \u65f6\uff0c\u7b97\u6cd5\u7ed3\u675f\u3002</li> </ol> <p>\u7f16\u7a0b\u5b9e\u73b0\uff1a</p> <pre><code>void reverseList(Sqlist *&amp;L)\n{\n    for (int i = 0, j = L-&gt;length - 1; i &lt;= j; i++, j--)\n    {\n        int temp = L-&gt;data[i];\n        L-&gt;data[i] = L-&gt;data[j];\n        L-&gt;data[j] = temp;\n    }\n}\n</code></pre> <p>\u53ea\u904d\u5386\u4e86\u4e00\u6b21\u6570\u7ec4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\)\uff0c\u53ea\u4f7f\u7528\u4e86\u5e38\u6570\u989d\u5916\u7a7a\u95f4\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\)\u3002</p> <ol> <li> <p>\u903b\u8f91\u4e0a\u987a\u5e8f\u8868\u4e0b\u6807\u4ece \\(1\\) \u5f00\u59cb\uff0c\u5b9e\u9645\u5b58\u50a8\u4f4d\u7f6e\u4ece \\(0\\) \u5f00\u59cb\u3002\u00a0\u21a9</p> </li> </ol>"},{"location":"data_structures/Sqstack/","title":"\u987a\u5e8f\u6808","text":"<p>\u987a\u5e8f\u6808\u662f\u6307\u5229\u7528\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u5b9e\u73b0\u7684\u6808\uff0c\u5373\u5229\u7528\u4e00\u7ec4\u5730\u5740\u8fde\u7eed\u7684\u5b58\u50a8\u5355\u5143\u4f9d\u6b21\u5b58\u653e\u81ea\u6808\u5e95\u5230\u6808\u9876\u7684\u6570\u636e\u5143\u7d20\uff0c\u540c\u65f6\u9644\u8bbe\u6307\u9488 <code>top</code> \u6307\u793a\u6808\u9876\u5143\u7d20\u5728\u987a\u5e8f\u6808\u4e2d\u7684\u4f4d\u7f6e\u3002\u901a\u5e38\u4e60\u60ef\u7684\u505a\u6cd5\u662f\uff1a\u4ee5 <code>top = 0</code> \u8868\u793a\u7a7a\u6808\uff0c\u9274\u4e8e C \u8bed\u8a00\u4e2d\u6570\u7ec4\u7684\u4e0b\u6807\u7ea6\u5b9a\u4ece \\(0\\) \u5f00\u59cb\uff0c\u5219\u5f53\u4ee5 C \u8bed\u8a00\u4f5c\u63cf\u8ff0\u8bed\u8a00\u65f6\uff0c\u5982\u6b64\u8bbe\u5b9a\u4f1a\u5e26\u6765\u5f88\u5927\u4e0d\u4fbf\uff0c\u56e0\u6b64\u53e6\u8bbe\u6307\u9488 <code>base</code> \u6307\u793a\u6808\u5e95\u5143\u7d20\u5728\u987a\u5e8f\u6808\u4e2d\u7684\u4f4d\u7f6e<sup>1</sup>\u3002\u5f53 <code>top</code> \u548c <code>base</code> \u7684\u503c\u76f8\u7b49\u65f6\uff0c\u8868\u793a\u7a7a\u6808\u3002</p> \u987a\u5e8f\u6808\u7684\u529f\u80fd\u5b9e\u73b0 \u5b9a\u4e49\u521d\u59cb\u5316\u5165\u6808\u5224\u7a7a\u51fa\u6808\u53d6\u6808\u9876\u5143\u7d20 top \u4f5c\u4e3a\u6307\u9488top \u4f5c\u4e3a\u7d22\u5f15 <pre><code>#define MAXSIZE 100\ntypedef struct \n{\n    SElemType *base;\n    SElemType *top;\n    int stacksize;\n} SqStack;\n</code></pre> <pre><code>#define MAXSIZE 100\ntypedef struct \n{\n    SElemType *base;\n    int top;\n    int stacksize;\n} SqStack;\n</code></pre> top \u4f5c\u4e3a\u6307\u9488top \u4f5c\u4e3a\u7d22\u5f15 <p>\u7b97\u6cd5\u6b65\u9aa4</p> <ol> <li>\u4e3a\u987a\u5e8f\u6808\u52a8\u6001\u5206\u914d\u4e00\u4e2a\u6700\u5927\u5bb9\u91cf\u4e3a \\(MAXSIZE\\) \u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f7f <code>base</code> \u6307\u5411\u8fd9\u6bb5\u7a7a\u95f4\u7684\u57fa\u5730\u5740\uff0c\u5373\u6808\u5e95\uff1b</li> <li>\u6808\u9876\u6307\u9488 <code>top</code> \u521d\u59cb\u4e3a <code>base</code>\uff0c\u8868\u793a\u6808\u4e3a\u7a7a\uff1b</li> <li><code>stacksize</code> \u7f6e\u4e3a\u6808\u7684\u6700\u5927\u5bb9\u91cf \\(MAXSIZE\\)\u3002</li> </ol> <pre><code>Status InitStack(SqStack &amp;S)\n{\n    S.base = new SElemType[MAXSIZE];\n    if (!S.base) return OVERFLOW;\n    S.top = S.base;\n    S.stacksize = MAXSIZE;\n    return OK;\n}\n</code></pre> <p>\u7b97\u6cd5\u6b65\u9aa4</p> <ol> <li>\u4e3a\u987a\u5e8f\u6808\u52a8\u6001\u5206\u914d\u4e00\u4e2a\u6700\u5927\u5bb9\u91cf\u4e3a \\(MAXSIZE\\) \u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f7f <code>base</code> \u6307\u5411\u8fd9\u6bb5\u7a7a\u95f4\u7684\u57fa\u5730\u5740\uff0c\u5373\u6808\u5e95\uff1b</li> <li>\u6808\u9876\u6307\u9488 <code>top</code> \u521d\u59cb\u4e3a \\(0\\)\uff0c\u8868\u793a\u6808\u4e3a\u7a7a\uff1b</li> <li><code>stacksize</code> \u7f6e\u4e3a\u6808\u7684\u6700\u5927\u5bb9\u91cf \\(MAXSIZE\\)\u3002</li> </ol> <pre><code>Status InitStack(SqStack &amp;S)\n{\n    S.base = new SElemType[MAXSIZE];\n    if (!S.base) return OVERFLOW;\n    S.top = 0;\n    S.stacksize = MAXSIZE;\n    return OK;\n}\n</code></pre> top \u4f5c\u4e3a\u6307\u9488top \u4f5c\u4e3a\u7d22\u5f15 <p>\u7b97\u6cd5\u6b65\u9aa4</p> <ol> <li>\u5224\u65ad\u6808\u662f\u5426\u6ee1\uff0c\u82e5\u6ee1\u5219\u8fd4\u56de <code>ERROR</code>\uff1b</li> <li>\u5c06\u65b0\u5143\u7d20\u538b\u5165\u6808\u9876\uff0c\u6808\u9876\u6307\u9488\u52a0 \\(1\\)\u3002</li> </ol> <pre><code>Status Push(SqStack &amp;S, SElemType e)\n{\n    if (S.top - S.base == S.stacksize) return ERROR;\n    *S.top++ = e;\n    return OK;\n}\n</code></pre> <p>\u7b97\u6cd5\u6b65\u9aa4</p> <ol> <li>\u5224\u65ad\u6808\u662f\u5426\u6ee1\uff0c\u82e5\u6ee1\u5219\u8fd4\u56de <code>ERROR</code>\uff1b</li> <li>\u5c06\u65b0\u5143\u7d20\u538b\u5165\u6808\u9876\uff0c\u6808\u9876\u6307\u9488\u52a0 \\(1\\)\u3002</li> </ol> <pre><code>Status Push(SqStack &amp;S, SElemType e)\n{\n    if (S.top == S.stacksize) return ERROR;\n    S.base[S.top++] = e;\n    return OK;\n}\n</code></pre> top \u4f5c\u4e3a\u6307\u9488top \u4f5c\u4e3a\u7d22\u5f15 <pre><code>bool StackEmpty(SqStack S)\n{\n    return S.top == S.base;\n}\n</code></pre> <pre><code>bool StackEmpty(SqStack S)\n{\n    return S.top == 0;\n}\n</code></pre> top \u4f5c\u4e3a\u6307\u9488top \u4f5c\u4e3a\u7d22\u5f15 <p>\u7b97\u6cd5\u6b65\u9aa4</p> <ol> <li>\u5224\u65ad\u6808\u662f\u5426\u7a7a\uff0c\u82e5\u6ee1\u5219\u8fd4\u56de <code>ERROR</code>\uff1b</li> <li>\u6808\u9876\u6307\u9488\u51cf \\(1\\)\uff0c\u6808\u9876\u5143\u7d20\u51fa\u6808\u4fdd\u5b58\u81f3 <code>e</code>\u3002</li> </ol> <pre><code>Status Pop(SqStack &amp;S, SElemType &amp;e)\n{\n    if (StackEmpty(S)) return ERROR;\n    e = *--S.top;\n    return OK;\n}\n</code></pre> <p>\u7b97\u6cd5\u6b65\u9aa4</p> <ol> <li>\u5224\u65ad\u6808\u662f\u5426\u7a7a\uff0c\u82e5\u6ee1\u5219\u8fd4\u56de <code>ERROR</code>\uff1b</li> <li>\u6808\u9876\u6307\u9488\u51cf \\(1\\)\uff0c\u6808\u9876\u5143\u7d20\u51fa\u6808\u4fdd\u5b58\u81f3 <code>e</code>\u3002</li> </ol> <pre><code>Status Pop(SqStack &amp;S, SElemType &amp;e)\n{\n    if (StackEmpty(S)) return ERROR;\n    e = S.base[--S.top];\n    return OK;\n}\n</code></pre> top \u4f5c\u4e3a\u6307\u9488top \u4f5c\u4e3a\u7d22\u5f15 <p>\u7b97\u6cd5\u6b65\u9aa4</p> <p>\u5f53\u6808\u975e\u7a7a\u65f6\uff0c\u6b64\u64cd\u4f5c\u8fd4\u56de\u5f53\u524d\u6808\u9876\u5143\u7d20\u7684\u503c\uff0c\u6808\u9876\u6307\u9488\u4fdd\u6301\u4e0d\u53d8\u3002</p> <pre><code>SElemType GetTop(SqStack S)\n{\n    if (!StackEmpty(S))\n        return *(S.top - 1);\n}\n</code></pre> <p>\u7b97\u6cd5\u6b65\u9aa4</p> <p>\u5f53\u6808\u975e\u7a7a\u65f6\uff0c\u6b64\u64cd\u4f5c\u8fd4\u56de\u5f53\u524d\u6808\u9876\u5143\u7d20\u7684\u503c\uff0c\u6808\u9876\u6307\u9488\u4fdd\u6301\u4e0d\u53d8\u3002</p> <pre><code>SElemType GetTop(SqStack S)\n{\n    if (!StackEmpty(S))\n        return S.base[S.top - 1];\n}\n</code></pre> \u5f80\u5e74\u771f\u9898 2012 A \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u5224\u65ad\u9898\uff0c\u6b63\u786e\u7684\u6253 \u221a\uff0c\u9519\u8bef\u7684\u6253 \u00d7 \u5e76\u6539\u6b63</p> <p>\u82e5\u5165\u6808\u987a\u5e8f\u4e3a <code>1 2 3</code>\uff0c\u90a3\u4e48\u51fa\u6808\u987a\u5e8f\u4e0d\u53ef\u80fd\u4e3a <code>3 1 2</code>\u3002</p> <p>\u221a</p> 2012 B \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u5224\u65ad\u9898\uff0c\u6b63\u786e\u7684\u6253 \u221a\uff0c\u9519\u8bef\u7684\u6253 \u00d7 \u5e76\u6539\u6b63</p> <p>\u5806\u6808\u7684\u8fd0\u7b97\u7279\u6027\u662f\u5148\u8fdb\u5148\u51fa\u3002</p> <p>\u00d7</p> <p>\u5806\u6808\u7684\u8fd0\u7b97\u7279\u6027\u662f\u540e\u8fdb\u5148\u51fa\uff08Last In First Out, LIFO\uff09\u3002</p> 2013 A \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b97\u6cd5\u8bbe\u8ba1\u9898</p> <p>\u7528\u4e00\u4e2a\u6574\u578b\u6570\u7ec4 \\(S\\)\uff08\u8bbe\u5927\u5c0f\u4e3a \\(MAX\\)\uff09\u4f5c\u4e3a\u4e24\u4e2a\u6808\u7684\u5171\u4eab\u7a7a\u95f4\u3002\u8981\u6c42\uff1a</p> <p>(1) \u8bf4\u660e\u5171\u4eab\u7684\u65b9\u6cd5\u4ee5\u53ca\u6808\u6ee1\u3001\u6808\u7a7a\u7684\u6761\u4ef6\u3002</p> <p>(2) \u7528 C \u8bed\u8a00\u5b9e\u73b0\u516c\u5171\u7684\u5165\u6808\u64cd\u4f5c <code>push(I, X)</code>\uff0c<code>I</code> \u4e3a \\(0\\) \u53f7\u6808\u6216 \\(1\\) \u53f7\u6808\uff0c<code>X</code> \u4e3a\u5165\u6808\u7684\u503c\u3002</p> <p>\\(0\\) \u53f7\u6808\u4ece \\(0\\) \u5f00\u59cb\u6b63\u5411\u5b58\u50a8\uff0c\\(1\\) \u53f7\u6808\u4ece \\(MAX - 1\\) \u5f00\u59cb\u9006\u5411\u5b58\u50a8\u3002\u8bbe\u7f6e <code>top[2]</code>\uff0c\u521d\u59cb\u503c\u4e3a \\({0, MAX - 1}\\)\uff0c\u6bcf\u6b21\u5165\u6808\u65f6\uff0c<code>top[0] + 1</code>\u3001<code>top[1] - 1</code>\uff0c\u6808\u6ee1\u7684\u6761\u4ef6\u4e3a <code>top[0] + 1 == top[1]</code>\u3002</p> <pre><code>#define MAX 100\nint top[2] = {0, MAX - 1};\nint S[MAX];\nvoid push(int I, int X)\n{\n    if (top[0] + 1 == top[1]) return;\n    S[top[I]] = X;\n    top[I] += I == 0? 1 : -1;\n}\n</code></pre> 2013 B \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b80\u7b54\u9898</p> <p>\u8bbe\u6709 \\(4\\) \u4e2a\u5143\u7d20\uff0c\u5165\u6808\u7684\u6b21\u5e8f\u4e3a\uff1a<code>A B C D</code>\uff0c\u95ee\u4ee5 <code>B</code> \u7b2c\u4e00\u4e2a\u51fa\u6808\u7684\u5e8f\u5217\u6709\u54ea\u4e9b\u60c5\u51b5\uff1f</p> <p><code>B A C D</code>\u3001<code>B A D C</code>\u3001<code>B C A D</code>\u3001<code>B C D A</code>\u3001<code>B D A C</code>\u3001<code>B D C A</code>\u3002</p> 2014 A / 2022 \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b97\u6cd5\u8bbe\u8ba1\u9898</p> <p>\u5047\u8bbe\u8868\u8fbe\u5f0f\u4e2d\u5141\u8bb8\u5305\u542b\u4e09\u79cd\u62ec\u53f7\uff1a\u5706\u62ec\u53f7<code>()</code>\u3001\u65b9\u62ec\u53f7<code>[]</code> \u548c\u5927\u62ec\u53f7<code>{}</code>\u3002\u8bf7\u7b80\u8ff0\u5b9e\u73b0\u5224\u65ad\u8868\u8fbe\u5f0f\u4e2d\u7684\u62ec\u53f7\u662f\u5426\u6b63\u786e\u914d\u5bf9\u7684\u7b97\u6cd5\u601d\u60f3\u3002</p> <p>\u7b97\u6cd5\u601d\u60f3\uff1a</p> <p>\u82e5\u5339\u914d\u5230\u5de6\u62ec\u53f7\uff0c\u76f4\u63a5\u5165\u6808\uff1b\u82e5\u5339\u914d\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u4ece\u6808\u9876\u5f39\u51fa\u4e00\u4e2a\u5de6\u62ec\u53f7\uff0c\u82e5\u5f39\u51fa\u7684\u5de6\u62ec\u53f7\u4e0e\u5f53\u524d\u53f3\u62ec\u53f7\u5339\u914d\uff0c\u5219\u5339\u914d\u6210\u529f\uff0c\u5426\u5219\u5339\u914d\u5931\u8d25\u3002</p> <p>\u7f16\u7a0b\u5b9e\u73b0\uff1a</p> <pre><code>bool isMatch(char *exp)\n{\n    char *Stack = new char[strlen(exp) + 1];\n    int top = 0;\n    for (int i = 0; exp[i]; i++)\n    {\n        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{')\n        {\n            Stack[top++] = exp[i];\n        }\n        else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}')\n        {\n            if (top == 0) return false;\n            if (exp[i] == ')' &amp;&amp; Stack[top - 1] == '(') top--;\n            else if (exp[i] == ']' &amp;&amp; Stack[top - 1] == '[') top--;\n            else if (exp[i] == '}' &amp;&amp; Stack[top - 1] == '{') top--;\n            else return false;\n        }\n    }\n    return top == 0;\n</code></pre> 2014 B \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b80\u7b54\u9898</p> <p>\u7ea6\u5b9a\u6570\u636e\u8fdb\u5165\u4e14\u53ea\u80fd\u4e00\u6b21\u8fdb\u5165\u5806\u6808\u7684\u5e8f\u5217\u4e3a \\((1,2,3,4,5)\\)\u3002\u8bf7\u6839\u636e\u5806\u6808\u72b6\u6001\u53d8\u5316\u5224\u65ad\u80fd\u5426\u5f97\u5230\u4e0b\u5217\u51fa\u6808\u5e8f\u5217\uff1f\u82e5\u80fd\uff0c\u5219\u5199\u51fa\u76f8\u5e94\u7684\u5165\u6808 \\(push\\)\u3001\u51fa\u6808 \\(pop\\) \u52a8\u4f5c\u5e8f\u5217\u3002</p> <p>(1) \\(34215\\)</p> <p>(2) \\(53412\\)</p> <p>(3) \\(45321\\)</p> <p>(4) \\(24531\\)</p> <p>(5) \\(15324\\)</p> <p>\u8bbe \\(push_x\\) \u8868\u793a\u5c06\u5143\u7d20 \\(x\\) \u5165\u6808\uff0c\\(pop_y\\) \u8868\u793a\u5c06\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff0c\u82e5\u52a8\u4f5c\u5e8f\u5217\u4e3a \\(\\varnothing\\) \u5219\u8868\u793a\u51fa\u6808\u5e8f\u5217\u4e0d\u5408\u6cd5\u3002</p> \u51fa\u6808\u5e8f\u5217 \u52a8\u4f5c\u5e8f\u5217 \\(34215\\) \\(push_1,push_2,push_3,pop_3,push_4,pop_4,pop_2,pop_1,push_5,pop_5\\) \\(53412\\) \\(\\varnothing\\) \\(45321\\) \\(push_1,push_2,push_3,push_4,pop_4,push_5,pop_5,pop_3,pop_2,pop_1\\) \\(24531\\) \\(push_1,push_2,pop_2,push_3,push_4,pop_4,push_5,pop_5,pop_3,pop_1\\) \\(15324\\) \\(\\varnothing\\) 2016 B \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b80\u7b54\u9898</p> <p>\u7528 \\(S\\) \u8868\u793a\u8fdb\u6808\u64cd\u4f5c\uff0c\\(X\\) \u8868\u793a\u51fa\u6808\u64cd\u4f5c\uff0c\u82e5\u5143\u7d20\u7684\u8fdb\u6808\u987a\u5e8f\u4e3a <code>A B C D</code>\uff0c\u4e3a\u4e86\u5f97\u5230 <code>A C D B</code> \u7684\u51fa\u6808\u987a\u5e8f\uff0c\u8bf7\u7ed9\u51fa\u5177\u4f53\u64cd\u4f5c\u8fc7\u7a0b\u4ee5\u53ca\u76f8\u5e94\u7684 \\(S\\) \u548c \\(X\\) \u64cd\u4f5c\u4e32\u3002</p> <p>\u521d\u59cb\u6808\u4e3a\u7a7a\uff0c\u64cd\u4f5c\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> \u5e8f\u53f7 \u6808 \u5165\u6808\u72b6\u6001 \u51fa\u6808\u72b6\u6001 \u64cd\u4f5c 1 <code>A</code> <code>A</code> \\(\\varnothing\\) \\(S_{\\text{A}}\\) 2 \\(\\varnothing\\) <code>A</code> <code>A</code> \\(X_{\\text{A}}\\) 3 <code>B</code> <code>A B</code> <code>A</code> \\(S_{\\text{B}}\\) 4 <code>B C</code> <code>A B C</code> <code>A</code> \\(S_{\\text{C}}\\) 5 <code>B</code> <code>A B C</code> <code>A C</code> \\(X_{\\text{B}}\\) 6 <code>B D</code> <code>A B C D</code> <code>A C</code> \\(S_{\\text{D}}\\) 7 <code>B</code> <code>A B C D</code> <code>A C D</code> \\(X_{\\text{C}}\\) 8 \\(\\varnothing\\) <code>A B C D</code> <code>A C D B</code> \\(X_{\\text{D}}\\) <p>\u64cd\u4f5c\u4e32\u4e3a \\(SXSSXSXX\\)\u3002</p> 2017 \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b80\u7b54\u9898</p> <p>\u7528 \\(S\\) \u8868\u793a\u8fdb\u6808\u64cd\u4f5c\uff0c\\(X\\) \u8868\u793a\u51fa\u6808\u64cd\u4f5c\uff0c\u82e5\u5143\u7d20\u7684\u8fdb\u6808\u987a\u5e8f\u4e3a <code>A B C D</code>\uff0c\u4e3a\u4e86\u5f97\u5230 <code>B C A D</code> \u7684\u51fa\u6808\u987a\u5e8f\uff0c\u8bf7\u7ed9\u51fa\u5177\u4f53\u64cd\u4f5c\u8fc7\u7a0b\u4ee5\u53ca\u76f8\u5e94\u7684 \\(S\\) \u548c \\(X\\) \u64cd\u4f5c\u4e32\u3002</p> <p>\u521d\u59cb\u6808\u4e3a\u7a7a\uff0c\u64cd\u4f5c\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> \u5e8f\u53f7 \u6808 \u5165\u6808\u72b6\u6001 \u51fa\u6808\u72b6\u6001 \u64cd\u4f5c 1 <code>A</code> <code>A</code> \\(\\varnothing\\) \\(S_{\\text{A}}\\) 2 <code>A B</code> <code>A B</code> \\(\\varnothing\\) \\(S_{\\text{B}}\\) 3 <code>A</code> <code>A B</code> <code>B</code> \\(X_{\\text{B}}\\) 4 <code>A C</code> <code>A B C</code> <code>B</code> \\(S_{\\text{C}}\\) 5 <code>A</code> <code>A B C</code> <code>B C</code> \\(X_{\\text{C}}\\) 6 \\(\\varnothing\\) <code>A B C</code> <code>B C A</code> \\(X_{\\text{A}}\\) 7 <code>D</code> <code>A B C D</code> <code>B C A</code> \\(S_{\\text{D}}\\) 8 \\(\\varnothing\\) <code>A B C D</code> <code>B C A D</code> \\(X_{\\text{D}}\\) <p>\u64cd\u4f5c\u4e32\u4e3a \\(SSXSXXSX\\)\u3002</p> 2017 \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b97\u6cd5\u8bbe\u8ba1\u9898</p> <p>\u5047\u8bbe\u6709\u5982\u4e0b\u5b9a\u4e49\u7684\u987a\u5e8f\u6808\u7c7b\u578b <code>SqStack</code>\uff0c\u8bf7\u7ed9\u51fa\u8fdb\u6808 <code>Push(s, e)</code>\u3001\u51fa\u6808 <code>Pop(s, e)</code>\u3001\u53d6\u6808\u9876\u5143\u7d20 <code>GetTop(s, e)</code> \u7684\u7b97\u6cd5\u3002</p> <pre><code>typedef struct \n{\n    ElemType data[MaxSize];\n    int top;\n} SqStack;\n</code></pre> <p><pre><code>Status Push(SqStack &amp;s, ElemType e)\n{\n    if (s.top == MaxSize) return OVERFLOW;\n    s.data[s.top++] = e;\n    return OK;\n}\n</code></pre> <pre><code>Status Pop(SqStack &amp;s, ElemType &amp;e)\n{\n    if (s.top == 0) return ERROR;\n    e = s.data[--s.top];\n    return OK;\n}\n</code></pre> <pre><code>Status GetTop(SqStack &amp;s, ElemType &amp;e)\n{\n    if (s.top == 0) return ERROR;\n    e = s.data[s.top - 1];\n    return OK;\n}\n</code></pre></p> 2020 \u9898\u76ee\u63cf\u8ff0\u7b54\u6848 <p>\u7b80\u7b54\u9898</p> <p>\u5047\u8bbe\u4ee5 <code>I</code> \u548c <code>O</code> \u5206\u522b\u8868\u793a\u8fdb\u6808\u548c\u51fa\u6808\u64cd\u4f5c\uff0c\u6808\u7684\u521d\u6001\u548c\u7ec8\u6808\u5747\u4e3a\u7a7a\uff0c\u8fdb\u6808\u548c\u51fa\u6808\u7684\u64cd\u4f5c\u5e8f\u5217\u53ef\u8868\u793a\u4e3a\u4ec5\u7531 <code>I</code> \u548c <code>O</code> \u7ec4\u6210\u7684\u5e8f\u5217\uff0c\u8bf7\u5224\u65ad\u4e0b\u9762\u6240\u793a\u7684\u5e8f\u5217\u4e2d\u54ea\u4e9b\u662f\u5408\u6cd5\u7684\uff0c\u54ea\u4e9b\u662f\u4e0d\u5408\u6cd5\u7684\uff1f\u5bf9\u4e8e\u4e0d\u5408\u6cd5\u7684\u5e8f\u5217\uff0c\u8bf7\u8bf4\u660e\u539f\u56e0\u3002</p> <p>(A) <code>IOIIOIOO</code></p> <p>(B) <code>IOOIOIIO</code></p> <p>(C) <code>IIIOIOIO</code></p> <p>(D) <code>IIIOOIOO</code></p> case \u64cd\u4f5c\u5e8f\u5217 \u662f\u5426\u5408\u6cd5 \u539f\u56e0 A <code>IOIIOIOO</code> \u5408\u6cd5 \\(\\varnothing\\) B <code>IOOIOIIO</code> \u4e0d\u5408\u6cd5 <code>IOO</code> \u64cd\u4f5c\u5728\u6808\u7a7a\u65f6\u51fa\u6808 C <code>IIIOIOIO</code> \u4e0d\u5408\u6cd5 \u7ec8\u6808\u4e0d\u4e3a\u7a7a D <code>IIIOOIOO</code> \u5408\u6cd5 \\(\\varnothing\\) <ol> <li> <p>\u6559\u6750\u53ea\u7ed9\u51fa\u4e86\u5c06 <code>top</code> \u4f5c\u4e3a\u6307\u9488\u7684\u4ee3\u7801\uff0c\u6b64\u5904\u989d\u5916\u7ed9\u51fa <code>top</code> \u4f5c\u4e3a\u7d22\u5f15\uff08\u4e0b\u6807\uff09\u7684\u4ee3\u7801\u3002\u00a0\u21a9</p> </li> </ol>"}]}